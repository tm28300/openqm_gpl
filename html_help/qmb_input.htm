<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- saved from url=(0029)http://www.helpandmanual.com/ -->
<head><script type="text/javascript" src="helpman_topicinit.js"></script>
<!-- Redirect browser to frame page if page is not in the content frame. -->
<script type="text/javascript">
<!--
if(top.frames.length==0) { top.location.href="index.html?qmb_input.htm"; }
else { parent.quicksync('a7.5.122'); }
//-->
</script>
<script type="text/javascript" src="highlight.js"></script>
   <title>INPUT</title>
   <meta name="generator" content="Help &amp; Manual" />
   <meta name="keywords" content="INPUT" />
   <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
   <meta http-equiv="Content-Style-Type" content="text/css" />
   <link type="text/css" href="default.css" rel="stylesheet" />
</head>
<body style="margin: 0px 0px 0px 0px; background: #FFFFFF;" onload="highlight();">
<div id="hmpopupDiv" style="visibility:hidden; position:absolute; z-index:1000; "></div>


<table width="100%" border="0" cellspacing="0" cellpadding="5" bgcolor="#649CCC">
  <tr valign="middle">
    <td align="left">
      <p class="p_Heading1"><span class="f_Heading1">INPUT</span></p>

    </td>
    <td align="right">
     <span style="font-size: 9pt">
     <a href="_.htm"><img src="top.gif" border=0 alt="Top"></a>&nbsp;
     <a href="qmb_inmat.htm"><img src="previous.gif" border=0 alt="Previous"></a>&nbsp;
     <a href="qmb_input_at.htm"><img src="next.gif" border=0 alt="Next"></a>
     </span>
    </td>
  </tr>
</table>


<!-- Placeholder for topic body. -->
<table width="100%" border="0" cellspacing="0" cellpadding="5"><tr valign="top"><td align="left">
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">The </span><span style="font-weight: bold; color: #000000;">INPUT</span><span style="color: #000000;"> statement enables entry of data from the keyboard or from previously stored </span><span style="font-weight: bold; color: #000000;">DATA</span><span style="color: #000000;"> statements.</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="font-weight: bold; color: #000000;">Format</span></p>
<p><span style="font-weight: bold; color: #000000;">&nbsp;</span></p>
<p style="margin: 0px 0px 0px 30px;"><span style="font-weight: bold; color: #000000;">INPUT</span><span style="color: #000000;"> </span><span style="font-style: italic; color: #000000;">var</span><span style="color: #000000;"> {</span><span style="font-weight: bold; color: #000000;">,</span><span style="color: #000000;"> </span><span style="font-style: italic; color: #000000;">length</span><span style="color: #000000;">} {</span><span style="font-weight: bold; color: #000000;">_</span><span style="color: #000000;">} {</span><span style="font-weight: bold; color: #000000;">:</span><span style="color: #000000;">} {</span><span style="font-weight: bold; color: #000000;">TIMEOUT</span><span style="color: #000000;"> </span><span style="font-style: italic; color: #000000;">wait</span><span style="color: #000000;">} {</span><span style="font-weight: bold; color: #000000;">HIDDEN</span><span style="color: #000000;">} {</span><span style="font-weight: bold; color: #000000;">UPCASE</span><span style="color: #000000;">}</span></p>
<p style="margin: 0px 0px 0px 30px;"><span style="color: #000000;">{</span><span style="font-weight: bold; color: #000000;">THEN</span><span style="font-style: italic; color: #000000;"> statement(s)</span><span style="color: #000000;">}</span></p>
<p style="margin: 0px 0px 0px 30px;"><span style="color: #000000;">{</span><span style="font-weight: bold; color: #000000;">ELSE</span><span style="font-style: italic; color: #000000;"> statement(s)</span><span style="color: #000000;">}</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">where</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="150"><span style="font-style: italic; color: #000000;">var</span></td><td><span style="color: #000000;">is the variable in which the data is to be stored.</span></td></tr></table></div><p style="text-indent: -150px; margin: 0px 0px 0px 180px;"><span style="color: #000000;">&nbsp;</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="150"><span style="font-style: italic; color: #000000;">length</span></td><td><span style="color: #000000;">is the maximum length of data to be allowed.</span></td></tr></table></div><p style="text-indent: -150px; margin: 0px 0px 0px 180px;"><span style="color: #000000;">&nbsp;</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="150"><span style="font-weight: bold; color: #000000;">HIDDEN</span></td><td><span style="color: #000000;">echoes characters back to the screen as asterisks for password type fields.</span></td></tr></table></div><p style="text-indent: -150px; margin: 0px 0px 0px 180px;"><span style="font-weight: bold; color: #000000;">&nbsp;</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="150"><span style="font-weight: bold; color: #000000;">TIMEOUT </span><span style="font-style: italic; color: #000000;">wait</span></td><td><span style="color: #000000;">Sets a timeout period in seconds. If input is not received in this time, the </span><span style="font-weight: bold; color: #000000;">INPUT</span><span style="color: #000000;"> terminates, leaving </span><span style="font-style: italic; color: #000000;">var</span><span style="color: #000000;"> unchanged. The keywords </span><span style="font-weight: bold; color: #000000;">FOR</span><span style="color: #000000;"> or </span><span style="font-weight: bold; color: #000000;">WAITING</span><span style="color: #000000;"> can be used in place of </span><span style="font-weight: bold; color: #000000;">TIMEOUT</span><span style="color: #000000;"> for compatibility with other environments.</span></td></tr></table></div><p style="text-indent: -150px; margin: 0px 0px 0px 180px;"><span style="color: #000000;">&nbsp;</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="150"><span style="font-weight: bold; color: #000000;">UPCASE</span></td><td><span style="color: #000000;">converts input data to uppercase.</span></td></tr></table></div><p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">The optional </span><span style="font-weight: bold; color: #000000;">THEN</span><span style="color: #000000;"> and </span><span style="font-weight: bold; color: #000000;">ELSE</span><span style="color: #000000;"> clauses used with </span><span style="font-weight: bold; color: #000000;">TIMEOUT</span><span style="color: #000000;"> allow a program to determine whether the input timed out. Successful input executes the </span><span style="font-weight: bold; color: #000000;">THEN</span><span style="color: #000000;"> clause. A timeout will execute the </span><span style="font-weight: bold; color: #000000;">ELSE</span><span style="color: #000000;"> clause.</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">The </span><span style="font-weight: bold; color: #000000;">INPUT</span><span style="color: #000000;"> statement reads data from the </span><span style="font-weight: bold; color: #000000;"><a href="qmb_data.htm">DATA</a></span><span style="color: #000000;"> queue or, if there is no stored data, from the keyboard.</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="font-weight: bold; color: #000000;">Keyboard Input</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">When taking input from the keyboard, the current prompt character will be displayed prior to reading data. The values stored for printing characters are the ASCII characters associated with the key. Non-printing characters result in other <a href="key_codes.htm">stored character values</a>.</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">If no </span><span style="font-style: italic; color: #000000;">length</span><span style="color: #000000;"> expression is included, data characters are stored until the return key is pressed. </span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">If </span><span style="font-style: italic; color: #000000;">length</span><span style="color: #000000;"> is specified, up to that number of characters may be entered after which input is automatically terminated as though the return key had been pressed, any subsequent key entries being retained for the next </span><span style="font-weight: bold; color: #000000;">INPUT</span><span style="color: #000000;"> statement. The return key is not stored as part of the input data.</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">The optional underscore component of the statement suppresses the automatic input termination when </span><span style="font-style: italic; color: #000000;">length</span><span style="color: #000000;"> characters have been entered. Any number of characters may be entered but only </span><span style="font-style: italic; color: #000000;">length</span><span style="color: #000000;"> characters will be displayed.</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">The optional colon causes the carriage return and line feed output when the return key is used or on reaching the input length limit to be suppressed.</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">The </span><span style="font-weight: bold; color: #000000;">INPUT</span><span style="color: #000000;"> statement recognises the backspace key, allowing this to be used to correct data entry errors. The terminfo system allows the code sent by the backspace key to be redefined from its default char(8). If an alternative, single byte definition is used, </span><span style="font-weight: bold; color: #000000;">INPUT</span><span style="color: #000000;"> will honour this, otherwise char(8) is used as the backspace.</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="font-weight: bold; color: #000000;">DATA Queue Input</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">Where the data queue is not empty, the </span><span style="font-weight: bold; color: #000000;">INPUT</span><span style="color: #000000;"> statement reads the item at the head of this queue, copying it verbatim to </span><span style="font-style: italic; color: #000000;">var</span><span style="color: #000000;"> with no processing of any embedded control characters. The </span><span style="font-style: italic; color: #000000;">length</span><span style="color: #000000;"> expression is ignored. The item is displayed as though it had been typed.</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="font-weight: bold; color: #000000;">Testing for Input</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">The </span><span style="font-weight: bold; color: #000000;">INPUT</span><span style="color: #000000;"> statement may be used to test whether there are characters waiting to be read from the keyboard or the data queue by using a negative </span><span style="font-style: italic; color: #000000;">length</span><span style="color: #000000;"> value. For example, the statement</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p style="margin: 0px 0px 0px 30px;"><span style="font-family: 'Courier New'; color: #000000;">INPUT S, -1</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">will set S to 1 if there is data waiting, 0 if no data is waiting.</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="font-weight: bold; color: #000000;">Use of Pipes</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">QM recognises input from pipes as a special case. Programs that process data from a pipe can read the data using the same QMBasic statements and functions as for keyboard input. If the end of the data is reached, a subsequent </span><span style="font-weight: bold; color: #000000;">INPUT</span><span style="color: #000000;"> will return a null string. The </span><span style="font-weight: bold; color: #000000;"><a href="qmb_status.htm">STATUS()</a></span><span style="color: #000000;"> function will return ER$EOF.</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="font-weight: bold; color: #000000;">Examples</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p style="margin: 0px 0px 0px 30px;"><span style="font-family: 'Courier New'; color: #000000;">INPUT ACCOUNT.NO, 10</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">This statement reads data into ACCOUNT.NO with a maximum length of 10 characters.</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p style="margin: 0px 0px 0px 30px;"><span style="font-family: 'Courier New'; color: #000000;">DISPLAY @(0,24) :&quot;Continue?&quot; :</span></p>
<p style="margin: 0px 0px 0px 30px;"><span style="font-family: 'Courier New'; color: #000000;">INPUT S:</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">This program fragment displays a query message on the bottom line of the screen and reads a response. Note the trailing colon in the </span><span style="font-weight: bold; color: #000000;">INPUT</span><span style="color: #000000;"> statement to suppress the line feed which would cause the screen to roll up as output was to the bottom line of the display.</span></p>

</td></tr></table>

</body>
</html>
