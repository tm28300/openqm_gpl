pageinfo = [[1164807897,5598],
	[1162385245,4786],
	[1180539365,20230],
	[1179952983,12361],
	[1159983563,12584],
	[1162295591,21882],
	[1170781077,7090],
	[1166610895,8259],
	[1164807477,6843],
	[1155652959,4619],
	[1155222469,9988],
	[1162549977,6791],
	[1193330293,6921],
	[1155653057,6753],
	[1155653095,5503],
	[1182261213,3245],
	[1155653109,5422],
	[1187107789,34591],
	[1164808155,6126],
	[1155245895,8410],
	[1187107957,10993],
	[1187086005,18653],
	[1156257605,5261],
	[1155653133,6394],
	[1155222511,4349],
	[1155245907,3779],
	[1155222519,7515],
	[1155653175,21667],
	[1155653201,19551],
	[1155222587,6360],
	[1155653269,6696],
	[1155653279,6290],
	[1155653293,8718],
	[1155653303,8752],
	[1187092347,9040],
	[1178112123,14916],
	[1158247359,12197],
	[1155222613,2947],
	[1164807971,4588],
	[1187086323,6404],
	[1155222659,3641],
	[1187086327,3520],
	[1155222683,5266],
	[1155557769,3556],
	[1187086473,4651],
	[1155222721,3371],
	[1155222733,2770],
	[1187086539,10750],
	[1155245973,8289],
	[1155309397,6764],
	[1155653379,6737],
	[1155245999,7348],
	[1155309521,6531],
	[1155221105,13877],
	[1180450681,7331],
	[1187695515,16984],
	[1194863035,10299],
	[1155746157,3815],
	[1187086579,4299],
	[1187086863,8151],
	[1187086919,7330],
	[1191604423,53064],
	[1156936181,12749],
	[1155246003,4969],
	[1186160559,3315],
	[1186161455,4788],
	[1162296343,7906],
	[1186161455,12075],
	[1178026329,31472],
	[1178123441,4381],
	[1155221739,5262],
	[1156497259,4571],
	[1164717047,8253],
	[1189687221,10872],
	[1156497279,2394],
	[1187126129,49744],
	[1162297765,10434],
	[1164717555,9888],
	[1164713527,7727],
	[1164713577,8652],
	[1166610229,8532],
	[1193314639,8201],
	[1155221873,3260],
	[1155222023,7390],
	[1187087049,15271],
	[1186043997,11841],
	[1155222823,13236],
	[1164981689,4723],
	[1155245733,4094],
	[1187092457,4225],
	[1155222829,7453],
	[1187020917,19312],
	[1187020929,9680],
	[1188896447,9806],
	[1170781083,6393],
	[1164807457,8086],
	[1155746471,4215],
	[1167827929,8616],
	[1162562493,11479],
	[1155246031,7174],
	[1158668505,7454],
	[1187087571,6220],
	[1155222883,6573],
	[1155309543,6745],
	[1155222891,5731],
	[1170772265,3834],
	[1187088627,9543],
	[1187088665,4899],
	[1155557057,6870],
	[1155222927,5411],
	[1155731005,9713],
	[1187088743,6164],
	[1188896457,6119],
	[1158244873,4997],
	[1170781087,5052],
	[1167828039,8456],
	[1155246091,9533],
	[1175083441,8298],
	[1175083535,12250],
	[1164981595,9176],
	[1164981603,6769],
	[1168887193,6778],
	[1155221565,5427],
	[1155221571,7304],
	[1155221579,3247],
	[1162294675,12915],
	[1158670547,5494],
	[1166519549,15003],
	[1187093931,6311],
	[1162560861,6299],
	[1162562363,9848],
	[1175075309,13617],
	[1155308423,4453],
	[1180436397,90075],
	[1162562593,4525],
	[1193323997,10446],
	[1188896433,8606],
	[1170781987,11750],
	[1155297871,8100],
	[1155297875,8469],
	[1187107961,6234],
	[1187107841,81339],
	[1155653069,6187],
	[1162295735,24148],
	[1180532057,27551],
	[1155657675,12910],
	[1155223991,5530],
	[1155297887,4923],
	[1172482839,39678],
	[1155297893,16811],
	[1155297897,2828],
	[1162562719,17213],
	[1155224007,5300],
	[1155297903,3998],
	[1170781487,20952],
	[1155297909,5433],
	[1162562819,10468],
	[1155224055,6802],
	[1158679055,4989],
	[1178194123,50274],
	[1187089147,5621],
	[1187094729,9492],
	[1188896477,7032],
	[1155297925,5525],
	[1155309569,6713],
	[1155297935,16630],
	[1170781511,6536],
	[1170781537,9721],
	[1174990427,5364],
	[1187094841,3549],
	[1187094869,6253],
	[1158241679,14261],
	[1175007701,38151],
	[1187027431,33011],
	[1164807829,7798],
	[1180539103,9143],
	[1168887351,11120],
	[1187107787,69218],
	[1155297985,3580],
	[1171469805,4417],
	[1155297991,5421],
	[1180436191,7501],
	[1162566667,11529],
	[1187021383,7387],
	[1187021819,7979],
	[1187021917,7973],
	[1178114815,3371],
	[1178114833,3277],
	[1178114845,3370],
	[1178114861,3351],
	[1178114873,3355],
	[1178114895,3372],
	[1178114907,3370],
	[1178114915,3346],
	[1178124127,4655],
	[1178114925,3389],
	[1162562901,3664],
	[1158680245,7964],
	[1162563083,5156],
	[1162563109,8679],
	[1187125455,7954],
	[1162566651,7334],
	[1188896489,9617],
	[1162566701,15321],
	[1155308535,7327],
	[1175006003,10219],
	[1158680221,8144],
	[1170781093,6409],
	[1155224265,4082],
	[1155224519,8770],
	[1155653599,3660],
	[1193315073,15382],
	[1182255625,13827],
	[1164807515,7233],
	[1187090113,3931],
	[1164808179,5244],
	[1169132859,6808],
	[1158675401,8022],
	[1155298009,3740],
	[1155298015,5510],
	[1187021943,10078],
	[1155557099,7520],
	[1155298019,3286],
	[1187125567,11899],
	[1155298025,7805],
	[1155224633,15771],
	[1155224659,11610],
	[1170781621,7657],
	[1155298031,8750],
	[1161194853,23797],
	[1175015843,11245],
	[1175014741,26112],
	[1187097323,4226],
	[1187288485,38244],
	[1155298043,8727],
	[1155298057,2386],
	[1155308701,8376],
	[1155298063,3959],
	[1155652991,3702],
	[1187095713,3840],
	[1155298075,2846],
	[1155652941,4621],
	[1155653679,4960],
	[1155309623,3171],
	[1187095745,2796],
	[1155244565,6845],
	[1189687321,28276],
	[1162550047,6181],
	[1164807849,5442],
	[1157043709,4653],
	[1168377291,5811],
	[1155309641,3572],
	[1170781099,4248],
	[1180539569,18038],
	[1155244591,3019],
	[1170781697,4634],
	[1191604541,4088],
	[1155298123,8456],
	[1194877215,35752],
	[1174496727,7286],
	[1155244623,17991],
	[1193330011,28568],
	[1187107837,7049],
	[1170781739,12478],
	[1194004477,15107],
	[1175013377,5549],
	[1187022317,153139],
	[1187022303,156165],
	[1193822671,26358],
	[1187125557,10650],
	[1187125575,3767],
	[1187871669,40008],
	[1187125557,4348],
	[1187174595,5570],
	[1187125571,27845],
	[1180537153,16099],
	[1187125553,7643],
	[1187125565,4175],
	[1187125551,14185],
	[1187125579,5026],
	[1187125581,2924],
	[1187125583,4133],
	[1187125585,3052],
	[1187125587,4691],
	[1187125587,5398],
	[1187125589,4104],
	[1189705045,18549],
	[1187125597,4936],
	[1187125593,2949],
	[1187125599,2876],
	[1187107795,10554],
	[1187107799,6041],
	[1187107801,5941],
	[1187107801,6531],
	[1187107803,13616],
	[1191427157,8157],
	[1192131477,18226],
	[1187107809,12966],
	[1187107809,8218],
	[1187107813,15339],
	[1187107815,12396],
	[1187107819,6543],
	[1187107821,5904],
	[1187107823,10589],
	[1187107825,6521],
	[1187107827,6564],
	[1187107831,6998],
	[1187102371,9613],
	[1187102373,7029],
	[1187102377,8523],
	[1187102381,5444],
	[1187102385,5229],
	[1187102387,8339],
	[1187102389,6333],
	[1187102391,5495],
	[1187102393,3755],
	[1187102395,5420],
	[1187102397,5825],
	[1187102399,5444],
	[1193410437,52786],
	[1187102401,8976],
	[1187102571,14959],
	[1187102571,5671],
	[1187102573,5041],
	[1187102575,5631],
	[1187102577,6076],
	[1187102579,6114],
	[1187102581,6184],
	[1187102581,5663],
	[1187102583,6910],
	[1187102585,19852],
	[1187166845,7276],
	[1187102589,6750],
	[1187102591,5691],
	[1187102593,6063],
	[1187102595,9077],
	[1187109111,5223],
	[1187102599,10228],
	[1187102603,2718],
	[1187102623,3183],
	[1187102629,4305],
	[1187102631,5810],
	[1187102633,4507],
	[1187102635,4552],
	[1187102639,5832],
	[1187102641,7441],
	[1187102645,5098],
	[1155300485,6609],
	[1187102221,6206],
	[1189705313,13096],
	[1193340745,12355],
	[1193340975,4747],
	[1193341269,8851],
	[1187102671,5155],
	[1193341583,12021],
	[1187102707,5437],
	[1187102711,7189],
	[1187102715,7396],
	[1193341607,10300],
	[1187102361,7747],
	[1187102775,4197],
	[1187102811,5969],
	[1193341663,7428],
	[1187102851,3380],
	[1187102855,7140],
	[1193341763,3948],
	[1188401927,39115],
	[1178636811,7593],
	[1187102983,11927],
	[1155300683,9414],
	[1187103015,7611],
	[1187103023,3655],
	[1187103033,9940],
	[1193341979,10050],
	[1187103133,4677],
	[1187103057,4568],
	[1187103117,9430],
	[1187103141,4191],
	[1187103149,4688],
	[1187103151,10031],
	[1193342083,5853],
	[1187103433,3749],
	[1187103439,5779],
	[1178636845,7509],
	[1187103835,5933],
	[1187103853,3718],
	[1187103857,7316],
	[1187097907,13779],
	[1187103949,10572],
	[1187103967,13295],
	[1187103979,5606],
	[1187103985,4748],
	[1187104013,8638],
	[1187104039,10020],
	[1187104051,15918],
	[1187104097,10845],
	[1187104183,21738],
	[1187104465,9383],
	[1187104497,7737],
	[1193343031,13676],
	[1193343041,13766],
	[1187104751,9215],
	[1193342885,8091],
	[1187104815,9359],
	[1187104837,12892],
	[1155643725,15512],
	[1155300963,5085],
	[1178121963,12380],
	[1155301029,7449],
	[1155301037,6553],
	[1155568057,6068],
	[1155306205,16054],
	[1155651629,5063],
	[1155301043,3211],
	[1170782121,7817],
	[1158681725,9608],
	[1155568101,5254],
	[1155301131,7406],
	[1187104855,12886],
	[1193343143,7875],
	[1187106707,8543],
	[1187107517,5900],
	[1193343519,9262],
	[1155301341,10113],
	[1155568639,6253],
	[1183051517,8011],
	[1187104889,9407],
	[1187104903,4717],
	[1187104925,9279],
	[1187104949,15352],
	[1187107339,7527],
	[1187105013,22470],
	[1187104975,29760],
	[1187105363,12039],
	[1187105389,5311],
	[1187105401,6970],
	[1187105417,12444],
	[1187125377,10925],
	[1187125039,8799],
	[1171017129,8004],
	[1187106049,4669],
	[1187106067,8801],
	[1187106081,5135],
	[1187106089,7622],
	[1187106291,8274],
	[1187106293,4685],
	[1194784985,12920],
	[1187106299,30053],
	[1187106303,8585],
	[1193344045,5415],
	[1155643755,8210],
	[1187106317,5384],
	[1155301595,7615],
	[1190235965,7856],
	[1187106351,12210],
	[1187106459,8855],
	[1187106417,21394],
	[1187106441,11351],
	[1155647603,12749],
	[1187106473,10588],
	[1187106477,11239],
	[1187106485,3920],
	[1187106489,4407],
	[1187106493,3917],
	[1187106495,4403],
	[1187106519,10755],
	[1176377803,4111],
	[1187106557,5057],
	[1193344217,7558],
	[1155302903,8363],
	[1187106565,6286],
	[1187106583,4309],
	[1187106603,5430],
	[1187106607,6479],
	[1187106613,5872],
	[1187106685,8919],
	[1187106719,7262],
	[1187106723,8126],
	[1187106773,10475],
	[1187106805,9724],
	[1187106813,18716],
	[1187106815,9150],
	[1155303045,8353],
	[1187106833,3535],
	[1193344303,6259],
	[1187106865,8048],
	[1187106883,5871],
	[1193344317,5379],
	[1193344325,6202],
	[1187107197,7288],
	[1187107357,6389],
	[1187107431,5641],
	[1157664949,5903],
	[1187107419,5997],
	[1187107423,7131],
	[1187107427,9438],
	[1187107429,7722],
	[1187107431,4016],
	[1187107433,10825],
	[1187107437,16051],
	[1187107441,7144],
	[1187108141,5478],
	[1187108147,3657],
	[1187107449,7057],
	[1187108239,5661],
	[1187107455,14357],
	[1193344457,6174],
	[1193344463,4554],
	[1187107467,6684],
	[1187108921,4426],
	[1187107503,6832],
	[1187107525,9642],
	[1187107529,11561],
	[1187107531,10933],
	[1187107531,11146],
	[1187107535,8157],
	[1193344497,13656],
	[1193344509,10683],
	[1187107545,11122],
	[1187107547,11082],
	[1187107549,13077],
	[1187107541,10419],
	[1187107551,10095],
	[1187107553,8052],
	[1187107557,8108],
	[1193344537,10872],
	[1187108979,4999],
	[1187107563,15667],
	[1187107567,11610],
	[1187107625,6295],
	[1193344569,10739],
	[1187107573,11333],
	[1187108949,6313],
	[1187107635,6484],
	[1187107605,7109],
	[1187107637,10820],
	[1187107639,13063],
	[1187107641,3792],
	[1187107643,10951],
	[1187107645,6943],
	[1187107647,13419],
	[1187107649,2986],
	[1187109095,5204],
	[1187107657,6022],
	[1187107665,7303],
	[1187107667,6860],
	[1187107669,17965],
	[1187107671,6572],
	[1187107655,5308],
	[1187107659,4013],
	[1187107661,7788],
	[1187107663,7376],
	[1187107673,7244],
	[1187107675,5419],
	[1187107677,8667],
	[1187107685,9758],
	[1155303205,9082],
	[1187109255,4761],
	[1187107691,6332],
	[1187107693,4786],
	[1193344659,4406],
	[1187107697,7956],
	[1187107697,5663],
	[1187107701,13081],
	[1187107703,9001],
	[1187109273,5656],
	[1187107707,9801],
	[1187107707,12253],
	[1193344691,8103],
	[1193344697,6552],
	[1187107715,5398],
	[1187107717,4617],
	[1187109373,4878],
	[1187107719,29035],
	[1187107721,5450],
	[1187107723,3635],
	[1187107727,5005],
	[1155570635,3757],
	[1187107729,6279],
	[1187107731,5346],
	[1187107733,4202],
	[1187107739,13448],
	[1187107741,11494],
	[1187107743,12689],
	[1187107745,6051],
	[1187107747,6566],
	[1187107749,4620],
	[1187107751,6353],
	[1187107753,4466],
	[1187107755,6210],
	[1187107757,7459],
	[1187107759,5831],
	[1187107761,4685],
	[1187107763,6344],
	[1187107765,4590],
	[1187107767,8415],
	[1187107769,5985],
	[1187107771,7918],
	[1187107773,9372],
	[1189694175,11783],
	[1187107777,11112],
	[1187107781,9450],
	[1187107779,10155],
	[1187107783,4121],
	[1187107853,8543],
	[1187107855,9209],
	[1187107857,5364],
	[1192704781,38967],
	[1187107851,4484],
	[1187107861,5531],
	[1187107863,11575],
	[1187107873,4243],
	[1187107875,6792],
	[1187107877,5591],
	[1187107879,7748],
	[1187107881,6367],
	[1187107883,6421],
	[1187107885,4199],
	[1187107887,3914],
	[1187107891,4552],
	[1187107895,4746],
	[1187107897,9171],
	[1187107897,6899],
	[1187107899,7344],
	[1182348861,8434],
	[1157961503,8784],
	[1187107901,3645],
	[1187107903,4577],
	[1157961521,6566],
	[1187107905,8473],
	[1187107905,16494],
	[1187107907,6403],
	[1187107909,6449],
	[1187107911,14181],
	[1187107911,6622],
	[1155654927,11970],
	[1187107913,6281],
	[1187107915,9104],
	[1187107917,11899],
	[1187107919,8706],
	[1187107919,7656],
	[1187107921,11971],
	[1187107923,9594],
	[1187107925,6709],
	[1187107925,8749],
	[1187107931,7514],
	[1187107931,7516],
	[1187107933,9027],
	[1187107935,10295],
	[1187107937,8299],
	[1187107939,4262],
	[1187107939,4691],
	[1187107951,9863],
	[1187107943,7468],
	[1187107943,7514],
	[1187020823,85689],
	[1182195033,13505],
	[1188396591,7519],
	[1188212905,26299],
	[1155245789,61408],
	[1164808193,3089],
	[1174986307,8260],
	[1175083349,8046],
	[1155245723,6464],
	[1155244709,3965],
	[1157574631,5541],
	[1187125471,4705],
	[1171547965,5124],
	[1155298131,2850],
	[1174990427,4775],
	[1188896501,4769],
	[1179952991,9329],
	[1188896511,6961],
	[1155244735,8367],
	[1187109225,8578],
	[1155298153,4581],
	[1155298159,4235],
	[1158244905,6379],
	[1158679017,4867],
	[1174990427,7786],
	[1155244763,81436],
	[1164807989,6827],
	[1174990427,5567],
	[1170781103,7522],
	[1155221363,6710],
	[1155244777,10387],
	[1155244849,5759],
	[1155244889,21680],
	[1155244833,5650],
	[1155244821,13852],
	[1155244827,3948],
	[1155244907,7826],
	[1155305415,11619],
	[1155244939,3893],
	[1155244957,37828],
	[1155244965,7204],
	[1155244931,114158],
	[1155305535,18623],
	[1155244869,15243],
	[1155244845,5166],
	[1155244855,3959],
	[1155244883,7909],
	[1168887073,4148],
	[1155244783,6002],
	[1155244875,2993],
	[1155244895,7781],
	[1155244901,13789],
	[1187125483,34681],
	[1155309161,18072],
	[1174990615,8259],
	[1162227919,6305],
	[1174990427,7392],
	[1179953025,9814],
	[1180536483,19461],
	[1155244985,7915],
	[1170781785,7866],
	[1194453243,38447],
	[1155244995,3726],
	[1170255789,9940],
	[1188896533,8360],
	[1170781773,4026],
	[1155245013,5716],
	[1162217943,10629],
	[1158245497,10380],
	[1170781795,5529],
	[1155245781,22210],
	[1187097307,4112],
	[1155245051,4926],
	[1174990427,6424],
	[1155245065,8536],
	[1161035651,11839],
	[1162565947,5183],
	[1155305801,16426],
	[1191426565,9465],
	[1170772097,6143],
	[1170781841,3427],
	[1155309321,3479],
	[1171547925,8744],
	[1155245737,4294],
	[1187107845,10747],
	[1187107947,12064],
	[1187107983,8756],
	[1171031657,10296],
	[1190901735,37830],
	[1156250043,2252],
	[1153750411,1583],
	[1153750411,1699],
	[1156250139,1894],
	[1156250121,2066],
	[1153750411,1831],
	[1153750413,1832],
	[1153750413,1882],
	[1187087909,3910],
	[1174990427,4383],
	[1155298219,7312],
	[1156154493,6658],
	[1155298205,4534],
	[1193324231,6951],
	[1193395143,14025],
	[1155245081,9540],
	[1155245087,8025],
	[1155657809,7416],
	[1180436203,5308],
	[1155245111,8158],
	[1155309341,3937],
	[1170781885,6114],
	[1185284409,26399],
	[1185284499,20899],
	[1185286373,52387],
	[1175007899,8037],
	[1155298229,5246],
	[1187097437,7086],
	[1190988117,9865],
	[1187125741,14071],
	[1155221149,6625],
	[1178115589,11158],
	[1155221269,6356],
	[1170957701,10105],
	[1174496069,11132],
	[1155221307,3700],
	[1188486387,108185],
	[1178115463,5457],
	[1155221333,6971],
	[1155221341,6027],
	[1182434259,8409],
	[1155221355,3199],
	[1187107763,4225],
	[1155298593,18743],
	[1155309367,3117],
	[1187091981,4866],
	[1187125541,22195],
	[1155653839,3422]];
pagedata = [ ["./abort.htm","ABORT","ABORT The ABORT command terminates all active processing and returns to the command prompt. Format ABORT{text} where text is the optional message ...",""],
["./absent_null.htm","ABSENT.NULL","ABSENT.NULL The ABSENT.NULL keyword treats an absent record as a null item rather than an error. Format ABSENT.NULL There are situations where two...",""],
["./accounts.htm","Accounts","Accounts An account is a place to work, typically corresponding to an application. Physically, an account is represented by an operating system di...",""],
["./account_restore.htm","ACCOUNT.RESTORE","ACCOUNT.RESTORE The ACCOUNT.RESTORE command restores a Pick style ACCOUNT-SAVE tape. Format ACCOUNT.RESTORE {options} where options is any combina...",""],
["./account_save.htm","ACCOUNT.SAVE","ACCOUNT.SAVE The ACCOUNT.SAVE command creates a Pick style ACCOUNT-SAVE tape. Format ACCOUNT.SAVE {account.name} {options} where account.name is t...",""],
["./acorrelatives.htm","A-Correlatives","A-Correlatives An A-correlative is an algebraic expression that applies operators to fields, constants and other data to produce a result. It is s...",""],
["./admin_user.htm","ADMIN.USER","ADMIN.USER The ADMIN.USER command allows management of the register of user names for network connections. User management is not applicable to th...",""],
["./ak.htm","Alternate Key Indices","Alternate Key Indices An alternate key index provides a method to access data file other than by the primary key (record id). Consider a file hold...",""],
["./alias.htm","ALIAS","ALIAS The ALIAS command creates a temporary alias for a command. Format ALIAS command target Create an alias ALIAS command Remove an alias ALIAS L...",""],
["./all_match.htm","ALL.MATCH","ALL.MATCH The ALL.MATCH keyword used in a SEARCH command specifies that the records to be selected must contain all of the given search strings. F...",""],
["./analyse_file.htm","ANALYSE.FILE","ANALYSE.FILE, ANALYZE.FILE The ANALYSE.FILE command (which may be entered using the American spelling) reports information regarding the structure...",""],
["./and.htm","AND","AND, &#38; The AND selection clause operator links two selection criteria where both must be true for the record to be selected. The synonym &#38; can be ...",""],
["./application_level_security.htm","Application Level Security","Application Level Security A well designed application never allows an end user to reach a command prompt. This leaves restriction of what a user ...",""],
["./as.htm","AS","AS The AS keyword is a field qualifier which defines a synonym for a field and any qualifying information. Format field.name {field.qualifier} AS ...",""],
["./assoc.htm","ASSOC","ASSOC The ASSOC keyword is a field qualifier to specify that the field is to be treated as part of a named association. Format field.name ASSOC \"n...",""],
["./associations.htm","Associations","Associations An association is a set of two or more multi-valued fields that are related such that the values are inter-dependent. For example, an...",""],
["./assoc_with.htm","ASSOC.WITH","ASSOC.WITH The ASSOC.WITH keyword is a field qualifier to specify that the field is to be associated with some other named field. Format field.nam...",""],
["./at_variables.htm","@-Variables","@-Variables QMBasic provides a number of special variables and constants with names prefixed by the @ character. Some @-variables can be updated b...",""],
["./autologout.htm","AUTOLOGOUT","AUTOLOGOUT The AUTOLOGOUT command sets an inactivity period after which a process will automatically be logged out. Format AUTOLOGOUT {period} whe...",""],
["./average.htm","AVERAGE","AVERAGE, AVG The AVERAGE field qualifier keyword causes a field to be reported together with its average value. The synonym AVG may be used. Forma...",""],
["./backup_and_restore.htm","Backup and Restore","Backup and Restore QM does not provide any special backup and restore utilities but relies instead on use of standard operating system level backu...",""],
["./basic.htm","BASIC","BASIC The BASIC verb runs the QMBasic compiler. Format BASIC {file.name} {record.name...} {options} where file.name is the name of the directory f...",""],
["./bell.htm","BELL","BELL The BELL command determines whether the audible alarm is sounded by various QM verbs (typically on encountering error conditions) or by QMBas...",""],
["./between.htm","BETWEEN","BETWEEN The BETWEEN selection clause operator compares a field or evaluated expression against two other fields, evaluated expressions or literal ...",""],
["./block_print.htm","BLOCK.PRINT and BLOCK.TERM","BLOCK.PRINT, BLOCK.TERM The BLOCK.PRINT command prints text on the default printer using large characters. The BLOCK.TERM is similar but directs i...",""],
["./boxed.htm","BOXED","BOXED The BOXED display clause option causes the query processor to generate a boxed report. This option is ignored if report destination is not a...",""],
["./break.htm","BREAK command","BREAK The BREAK command controls the action taken on use of the break key. It can be used, for example, the suppress quits during critical parts o...",""],
["./break_on.htm","BREAK.ON","BREAK.ON The BREAK.ON field qualifier keyword causes the query processor to display the named field, generating a breakpoint whenever the field va...",""],
["./break_sup.htm","BREAK.SUP","BREAK.SUP The BREAK.SUP field qualifier keyword causes the query processor to generate a breakpoint whenever the field value changes. The field is...",""],
["./build_index.htm","BUILD.INDEX","BUILD.INDEX The BUILD.INDEX command populates an alternate key index Format BUILD.INDEX filename field(s) BUILD.INDEX filename ALL where filename ...",""],
["./by.htm","BY","BY The BY sort clause keyword causes the query processor to sort records prior to display or when building a select list. Format BY field where fi...",""],
["./by_dsnd.htm","BY.DSND","BY.DSND, BY-DSND The BY.DSND sort clause keyword causes the query processor to sort records prior to display or when building a select list. The s...",""],
["./by_exp.htm","BY.EXP","BY.EXP, BY-EXP The BY.EXP sort clause keyword applied to a multi-valued field causes the query processor to explode the multi-valued items to form...",""],
["./by_exp_dsnd.htm","BY.EXP.DSND","BY.EXP.DSND, BY-EXP-DSND The BY.EXP.DSND sort clause keyword applied to a multi-valued field causes the query processor to explode the multi-value...",""],
["./calc.htm","CALC","CALC, CALCULATE The CALC keyword prefixes an I-type field name or an evaluated expression and causes the calculation to be performed on the total ...",""],
["./catalogue.htm","CATALOGUE","CATALOGUE, CATALOG The CATALOGUE command (which may be entered with the American spelling for compatibility with other products) adds a compiled Q...",""],
["./cgi.htm","Building a Web Server Application","Building a Web Server Application There are advanced web based packages available for QM but for many applications a simple CGI program gives an e...",""],
["./clean_account.htm","CLEAN.ACCOUNT","CLEAN.ACCOUNT The CLEAN.ACCOUNT command clears the $HOLD, $COMO and $SAVEDLISTS files. Format CLEAN.ACCOUNT The CLEAN.ACCOUNT command is used to r...",""],
["./clear_abort.htm","CLEAR.ABORT","CLEAR.ABORT The CLEAR.ABORT command clears the abort status in an ON.ABORT paragraph. Format CLEAR.ABORT When an application generates an abort ev...",""],
["./clear_data.htm","CLEAR.DATA","CLEAR.DATA, CLEARDATA The CLEAR.DATA command (synonym CLEARDATA) clears the data queue created by the DATA command or the QMBasic DATA statement. ...",""],
["./clear_file.htm","CLEAR.FILE","CLEAR.FILE The CLEAR.FILE command deletes all records from a file. Format CLEAR.FILE {DATA &#166; DICT} file.name If neither the DATA keyword nor the D...",""],
["./clear_input.htm","CLEAR.INPUT","CLEAR.INPUT, CLEARINPUT The CLEAR.INPUT command (synonym CLEARINPUT) clears all unprocessed characters entered at the keyboard. Format CLEAR.INPUT...",""],
["./clear_locks.htm","CLEAR.LOCKS","CLEAR.LOCKS The CLEAR.LOCKS command releases task locks. Format CLEAR.LOCKS {lock.number} where lock.number is the number of the task lock (0 to 6...",""],
["./clear_prompts.htm","CLEAR.PROMPTS","CLEAR.PROMPTS, CLEARPROMPTS The CLEAR.PROMPTS command (synonym CLEARPROMPTS) clears all stored inline prompts and responses. Format CLEAR.PROMPTS ...",""],
["./clear_select.htm","CLEAR.SELECT","CLEAR.SELECT, CLEARSELECT The CLEAR.SELECT command (synonym CLEARSELECT) clears an active select list. It is useful to prevent use of a select lis...",""],
["./clear_stack.htm","CLEAR.STACK","CLEAR.STACK The CLEAR.STACK command clears the command stack. Format CLEAR.STACK The CLEAR.STACK command removes all entries from the current comm...",""],
["./clr.htm","CLR","CLR, CS The CLR command (synonym CS) clears the terminal screen. Format CLR @SYSTEM.RETURN.CODE is not affected by this command. ",""],
["./cname.htm","CNAME","CNAME, RENAME The CNAME command (synonym RENAME) changes the name of a file or record(s) within a file. Format CNAME old.file.name, new.file.name ...",""],
["./col_hdg.htm","COL.HDG","COL.HDG, DISPLAY.NAME The COL.HDG keyword defines an alternative column heading for reported data. The synonym DISPLAY.NAME may be used. Format fi...",""],
["./col_hdg_id.htm","COL.HDG.ID","COL.HDR.ID The COL.HDG.ID keyword causes the query processor to use the display clause field names as the default column headings. Format COL.HDG....",""],
["./col_hdr_supp.htm","COL.HDR.SUPP","COL.HDR.SUPP, COL-HDR-SUPP, COL.HDR.SUP, COL-HDR-SUP The COL.HDR.SUPP display clause keyword suppresses page and column headings. The synonyms COL...",""],
["./col_spaces.htm","COL.SPACES","COL.SPACES, COL.SPCS The COL.SPACES keyword determines the number of spaces inserted between columns of a tabular report. The synonym COL.SPCS may...",""],
["./col_sup.htm","COL.SUP","COL.SUP, COL-SUPP The COL.SUP display clause keyword suppresses column headings. The synonym COL-SUPP can be used. Format COL.SUP The COL.SUP keyw...",""],
["./commandeditor.htm","The Command Editor","The Command Editor The command line editor allows editing of a command line. It is of use in correcting typing errors or repeating saved commands,...",""],
["./commandparsing.htm","The Command Environment","The Command Environment Although applications commonly use the graphical interface capabilities of QM, developers normally work from the character...",""],
["./commandstack.htm","The Command Stack","The Command Stack Commands entered at the terminal are stored in a command stack (to be technically correct, it a queue but historically users hav...",""],
["./command_scripts.htm","Command Scripts","Command Scripts The QM VOC file normally contains one or more items that represent scripts of commands to be executed automatically at certain eve...",""],
["./comment.htm","* (Comment)","*(Comment) The * (comment) command allows comment text to be embedded in sentences and paragraphs. Format * {text} A comment line has its first no...",""],
["./como.htm","COMO","COMO The COMO command controls recording of terminal output in a como (command output) file. Format COMO ON record.name Commence recording of term...",""],
["./compile_dict.htm","COMPILE.DICT","COMPILE.DICT, CD The COMPILE.DICT command (synonym CD) is used to compile A, C, I and S-type records in dictionaries. Format COMPILE.DICT file.nam...",""],
["./config.htm","CONFIG","CONFIG The CONFIG command reports your licence details and configuration parameters. It can also be used to modify the values of some parameters. ...",""],
["./configparams.htm","Configuration parameters","Configuration Parameters QM has a number of configuration parameters that determine major settings for the system. On Windows systems, these are s...",""],
["./configure_file.htm","CONFIGURE.FILE","CONFIGURE.FILE The CONFIGURE.FILE command changes the configuration of a file. Format CONFIGURE.FILE {DICT} file.name parameters where file.name i...",""],
["./conv.htm","CONV","CONV The CONV keyword defines an alternative conversion for reported data. Format field CONV conv.spec where field is the field or expression to w...",""],
["./conv_b.htm","Boolean conversion (B)","Boolean Conversion (B) The boolean conversion code converts between the internal representation of false (0) and true (1) and the external represe...",""],
["./conv_b64.htm","Base 64 Conversion (B64)","Base 64 Conversion (B64) The base64 conversion code translates data to or from a format widely used for transmission over the internet. The full f...",""],
["./conv_c.htm","Concatenation conversion (C)","Concatenation conversion (C) The concatenation conversion code concatenates data items, optionally inserting separators between them. It behaves i...",""],
["./conv_code.htm","Conversion Codes","Conversion Codes Sometimes data is not stored in the database in the same way as we would wish to present it to a user. A conversion code determin...",""],
["./conv_d.htm","Date conversion (D)","Date Conversion (D) Inside QM, dates are stored as a number of days since 31 December 1967 (day zero). All dates after that point are represented ...",""],
["./conv_field.htm","Field extraction (&#60;f,v,s&#62;)","Field Extraction (&#60;f,v,s&#62;) The field extraction code, only supported for output conversion, extracts a field, value or subvalue from the source da...",""],
["./conv_g.htm","Group conversion (G)","Group Conversion (G) The group conversion code treats the source data as being formed from a number of components separated by a delimiter charact...",""],
["./conv_is.htm","Integer conversion (IS, IL)","Integer Conversion (IS, IL) The integer conversion codes convert integer values between numeric form and hardware specific integer representation....",""],
["./conv_l.htm","Length conversion (L)","Length Conversion (L) The length conversion code performs string length constraint checks. It works identically on input and output conversions an...",""],
["./conv_mc.htm","Character conversion (MCx)","Character Conversion (MCx) The character conversion codes perform various character based conversions. MCA Delete all non-alphabetic characters MC...",""],
["./conv_mcdx.htm","Radix conversion (MCDX, MCXD)","Radix Conversion (MCDX, MCXD) Used as an output conversion, MCDX converts a number from decimal to hexadecimal and MCXD converts from hexadecimal ...",""],
["./conv_md.htm","Masked decimal conversion (MD, ML, MR)","Masked Decimal Conversion (MD, ML, MR) The masked decimal conversion codes convert a number between its internal and external forms. The formats a...",""],
["./conv_mo.htm","Radix conversion (MB, MO, MX)","Radix Conversion (MB, MO, MX) The radix conversion codes convert a number to/from binary (MB), octal (MO) or hexadecimal (MX). Input Conversion Th...",""],
["./conv_mt.htm","Time conversion (MT)","Time Conversion (MT) The time conversion code converts a time from its internal representation (number of seconds since midnight) to a string repr...",""],
["./conv_p.htm","Pattern matching conversion (P)","Pattern Matching Conversion (P) The P conversion code attempts to match the supplied data against one or more pattern templates The full format of...",""],
["./conv_r.htm","Range Check Conversion (R)","Range Check Conversion (R) The R conversion code checks whether a numeric value is within a specified range. The full format of this conversion co...",""],
["./conv_s.htm","Substitution conversion (S)","Substitution Conversion (S;value1;value2) The S (substitution) conversion code allows an application to handle zero or null data items as a specia...",""],
["./conv_tfile.htm","File translation conversion","File Translation (Tfile) The T conversion code uses the source data as a record id to the named file and returns data from this record. The format...",""],
["./conv_tn.htm","Text substring conversion","Text Substring Conversion (Tm,n) The text substring extraction code returns a portion of the source data. The format of the conversion code is Tm,...",""],
["./conv_u.htm","User defined conversions","User Defined Conversion Codes (U) Users may add their own conversion codes to the system by writing a QMBasic subroutine to perform the conversion...",""],
["./copy.htm","COPY","COPY The COPY command copies selected records from one file to another, or within the same file. Format COPY FROM {DICT} src.file {TO {DICT} tgt.f...",""],
["./copyp.htm","COPYP","COPYP The COPYP command copies selected records from one file to another, or within the same file using Pick syntax. Format COPYP {DICT }src.file ...",""],
["./copy_list.htm","COPY.LIST","COPY.LIST The COPY.LIST command copies a saved select list to another file or a different record in the same file. Alternatively, the list can be ...",""],
["./correlatives.htm","Correlatives","Correlatives A correlative is an expression in an A or S-type dictionary item that derives a value from data in a database record. Although simila...",""],
["./count.htm","COUNT","COUNT The COUNT verb reports the number of records meeting specified criteria. COUNT {DICT} file.name {USING {DICT} file.name} { selection.clause ...",""],
["./count_sup.htm","COUNT.SUP","COUNT.SUP The COUNT.SUP display option keyword suppresses display of the number of records listed or selected at the end of the command. Format CO...",""],
["./create_account.htm","CREATE.ACCOUNT","CREATE.ACCOUNT The CREATE.ACCOUNT command creates a new QM account. Format CREATE.ACCOUNT acc.name pathname {NO.QUERY} where acc.name is the name ...",""],
["./create_file.htm","CREATE.FILE","CREATE.FILE The CREATE.FILE command is used to create a QM file. Format CREATE.FILE {portion} file.name {, subfile} {type} {configuration} {USING ...",""],
["./create_index.htm","CREATE.INDEX","CREATE.INDEX The CREATE.INDEX command creates an alternate key index . Format CREATE.INDEX filename field(s) {NO.NULLS} {PATHNAME index.path} wher...",""],
["./create_key.htm","CREATE.KEY","CREATE.KEY The CREATE.KEY command creates a data encryption key. This command can only be executed by users with administrator rights in the QMSYS...",""],
["./create_user.htm","CREATE.USER","CREATE.USER The CREATE.USER command creates a new user name in the register of users for network security checks. User management is not applicabl...",""],
["./creatinganddeletingfiles.htm","Creating and Deleting Files","Creating and Deleting Files As a general rule, files that may be accessed from the operating system level must be directory files and all other fi...",""],
["./creatingandmodifyingdata.htm","Creating and Modifying Data","Creating and Modifying Data QM provides several data entry and modification tools, each designed to fit a particular mode of use. ED The line edit...",""],
["./csv.htm","CSV","CSV The CSV display option keyword specifies that the report should be produced in CSV format. Format CSV {mode} {\"delimiter\"} where mode is a num...",""],
["./ct.htm","CT","CT The CT (Copy to Terminal) command displays the content of record(s) from a file. Format CT {DICT} filename {record ... &#166; *} {options} where fil...",""],
["./cumulative.htm","CUMULATIVE","CUMULATIVE The CUMULATIVE field qualifier keyword displays the cumulative value of a field. Format CUMULATIVE field {field.qualifiers} where field...",""],
["./data.htm","DATA","DATA The DATA command supplies data to be used by an associated verb or QMBasic program which would normally take input from the keyboard. It may ...",""],
["./date.htm","DATE","DATE The DATE command displays the current date and time. Format DATE {date} DATE INTERNAL where date is an internal or external format date. If n...",""],
["./date_format.htm","DATE.FORMAT","DATE.FORMAT The DATE.FORMAT command selects the date format to be used by default or displays this setting. Format DATE.FORMAT OFF DATE.FORMAT { O...",""],
["./dbl_spc.htm","DBL.SPC","DBL.SPC, DBL-SPC The DBL.SPC display option keyword causes records in a tabular report to be double spaced. The synonym DBL-SPC may be used. Forma...",""],
["./debug.htm","DEBUG","DEBUG The DEBUG command enters the QMBasic program debugger . Format DEBUG {file.name} record.name {LPTR} {NO.PAGE} where file.name is the name of...",""],
["./deinstallation.htm","Deinstallation","Deinstallation Should it be necessary to uninstall the QM database, the following steps are required: Windows Execute the QM Uninstaller from the ...",""],
["./delete.htm","DELETE","DELETE The DELETE command deletes specified records from a file. Format DELETE {DICT} file.name {record.name ...} DELETE {DICT} file.name {NO.QUER...",""],
["./delete_account.htm","DELETE.ACCOUNT","DELETE.ACCOUNT The DELETE.ACCOUNT command deletes a QM account. Format DELETE.ACCOUNT acc.name where acc.name is the name of the account to be del...",""],
["./delete_catalogue.htm","DELETE.CATALOGUE","DELETE.CATALOGUE, DELETE.CATALOG The DELETE.CATALOGUE command (synonym DELETE.CATALOG) removes an entry from the system catalogue. Format DELETE.C...",""],
["./delete_common.htm","DELETE.COMMON","DELETE.COMMON The DELETE.COMMON command deletes one or all named common blocks. Format DELETE.COMMON name DELETE.COMMON ALL where name is the name...",""],
["./delete_file.htm","DELETE.FILE","DELETE.FILE The DELETE.FILE command deletes one or both portions of a file. Format DELETE.FILE {DATA &#166; DICT} file.name {, subfile} {options} where...",""],
["./delete_index.htm","DELETE.INDEX","DELETE.INDEX The DELETE.INDEX command deletes an alternate key index . Format DELETE.INDEX file.name field(s) to delete specific indices DELETE.IN...",""],
["./delete_key.htm","DELETE.KEY","DELETE.KEY The DELETE.KEY command deletes a data encryption key. This command can only be executed by users with administrator rights in the QMSYS...",""],
["./delete_list.htm","DELETE.LIST","DELETE.LIST The DELETE.LIST command deletes a previously saved select list . Format DELETE.LIST list.name where list.name is the name of the recor...",""],
["./delete_user.htm","DELETE.USER","DELETE.USER The DELETE.USER command deletes a user name from the register of users for network security checks. User management is not applicable ...",""],
["./delimiter.htm","DELIMITER","DELIMITER The DELIMITER display option keyword specifies the separating character(s) to be used in a delimited report. Format DELIMITER \"string\" w...",""],
["./det_sup.htm","DET.SUP","DET.SUP, DET-SUPP The DET.SUP keyword (synonym DET-SUPP) suppresses reporting of detail lines, leaving only page and column headers, totals, foote...",""],
["./dictionaries.htm","Dictionaries","Dictionaries Every data file normally has an associated dictionary which describes the structure of the data records in the file. The dictionary i...",""],
["./dict_a.htm","Dictionary A and S-type records","Dictionary A and S-Type Records - Pick Style Data Definitions A and S-type dictionary items are an alternative to the preferred D and I-type items...",""],
["./dict_c.htm","Dictionary C-type records","Dictionary C-Type Records - Calculated Values A C-type record defines a calculated value and has up to 8 fields: 1: C { descriptive text } 2: QMBa...",""],
["./dict_d.htm","Dictionary D-type records","Dictionary D-Type Records - Data Items A D-type record defines a field stored in a data file and has up to 8 fields: 1: D { descriptive text } 2: ...",""],
["./dict_i.htm","Dictionary I-type records","Dictionary I-Type Records - Indirect Data An I-type record defines calculated data and has up to 8 fields: 1: I { descriptive text } 2: Expression...",""],
["./dict_l.htm","Dictionary L-type records","Dictionary L-Type Records An L-type record represents a link to another file. It can be used in query processor commands to reference fields in a ...",""],
["./dict_ph.htm","Dictionary PH-type records","Dictionary PH-Type Records A phrase can be used in query processor sentences. When the sentence is executed, the phrase name is replaced by the ph...",""],
["./dict_x.htm","Dictionary X-type records","Dictionary X-Type Records X-type dictionary items are miscellaneous data storage records which may be used in any way the application designer wis...",""],
["./directoryfiles.htm","Directory Files","Directory Files A directory file is represented by an operating system directory and the records within it by operating system files. The record k...",""],
["./display.htm","DISPLAY","DISPLAY The DISPLAY command displays text at the user&#39;s terminal. Format DISPLAY text {:} DISPLAY @(col,row)text {:} The optional colon at the end...",""],
["./displayclause.htm","The Display Clause","The Display Clause The optional display clause determines which fields (columns) are reported and how they are displayed. This clause is applicabl...",""],
["./display_like.htm","DISPLAY.LIKE","DISPLAY.LIKE The DISPLAY.LIKE keyword is a field qualifier which causes the field to be displayed using the attributes of another field defined in...",""],
["./dlr_echo.htm","$ECHO","$ECHO The $ECHO command inserted in a paragraph enables or disabled paragraph tracing. Format $ECHO {ON} $ECHO OFF The $ECHO command (optionally w...",""],
["./dump.htm","DUMP","DUMP The DUMP command displays the content of record(s) from a file in hexadecimal and character format. Format DUMP {DICT} filename {record ... &#166;...",""],
["./dynamicfiles.htm","Dynamic Files","Dynamic Files A dynamic file is represented by an operating system directory, the records within it stored in a fast access file format in the dir...",""],
["./echo.htm","ECHO","ECHO The ECHO command suspends or enables echoing of keyboard input. Format ECHO OFF Disable echoing of keyboard input ECHO ON Enable echoing of k...",""],
["./ed.htm","ED","ED, EDIT The ED command enters the QM line editor. The synonym EDIT can be used. Format ED {DICT} file.name {record.id} {NO.QUERY} where DICT indi...",""],
["./edit_list.htm","EDIT.LIST","EDIT.LIST The EDIT.LIST command invokes the ED line editor to edit a saved select list in the $SAVEDLISTS file. Format EDIT.LIST list.name where l...",""],
["./encryption.htm","Data Encryption","Data Encryption QM supports three data encryption methods: Ad hoc encryption is provided by two QMBasic functions, ENCRYPT() and DECRYPT() . These...",""],
["./encrypt_file.htm","ENCRYPT.FILE","ENCRYPT.FILE The ENCRYPT.FILE command sets the data encryption key for specific fields or the entire record. Format ENCRYPT.FILE filename field, k...",""],
["./entering_qm.htm","Entering QM","Entering QM The QM database can be accessed in a number of ways. The simplest is use of a console session. This is entry into QM directly from the...",""],
["./enumerate.htm","ENUMERATE","ENUMERATE, ENUM The ENUMERATE field qualifier keyword causes a field to be reported together with a count of values. The synonym ENUM may be used....",""],
["./eq.htm","EQ","EQ, EQUAL, = The EQ selection clause operator compares a field or evaluated expression against another field, evaluated expression or literal valu...",""],
["./errorlogging.htm","Error Logging","Error Logging QM includes an error logging system that records brief details of errors that may require investigation by system administrators or ...",""],
["./errors.htm","Error Numbers","Error Numbers Error numbers are defined in the ERR.H record of the SYSCOM file. 1 ER$ARGS Command arguments invalid or incomplete 2 ER$NCOMO Como ...",""],
["./eval.htm","EVAL","EVAL, EVALUATE The EVAL (or EVALUATE) keyword prefixes an expression to be evaluated and used as though it were an I-type defined in the dictionar...",""],
["./fcorrelatives.htm","F-Correlatives","F-Correlatives On systems that process correlatives interpretively, A-correlatives are converted to the more efficient F-correlative format at the...",""],
["./file_processing.htm","File Processing","File Processing QMBasic programs usually need to access database files. This section discusses the various techniques available. Further informati...",""],
["./file_save.htm","FILE.SAVE","FILE.SAVE The FILE.SAVE command creates a Pick style FILE-SAVE tape. Format FILE.SAVE {account.list} {options} where account.list is a list of the...",""],
["./find_account.htm","FIND.ACCOUNT","FIND.ACCOUNT The FIND.ACCOUNT command locates an account on a Pick style FILE.SAVE tape. Format FIND.ACCOUNT account.name where account.name is th...",""],
["./fmt.htm","FMT","FMT The FMT keyword defines an alternative format for reported data. Format field FMT fmt.spec where field is the field or expression to which the...",""],
["./fmt_spec.htm","Format Specifications","Format Specifications Format specifications appear in field 5 of C-type , D-type and I-type dictionary items to determine the default format of ou...",""],
["./footing.htm","FOOTING","FOOTING, FOOTER The FOOTING keyword defines a page footing for the report. Format FOOTING \"text\" where text is the footing text to appear on each ...",""],
["./force.htm","FORCE","FORCE The FORCE keyword forces output of page headings in an empty report. Format FORCE A query report that finds no records to output normally sh...",""],
["./format.htm","FORMAT","FORMAT The FORMAT command reformats QMBasic source programs to aid readability. Format FORMAT {file.name} {record.name} {CASE} where file.name is ...",""],
["./form_list.htm","FORM.LIST","FORM.LIST The FORM.LIST command creates an active select list from a list of record keys in a file. Format FORM.LIST {DICT} file.name record.id wh...",""],
["./from.htm","FROM","FROM The FROM keyword specifies the select list to be used as a source of record ids for processing by the query. Format FROM list.no where list.n...",""],
["./fstat.htm","FSTAT","FSTAT The FSTAT command collects and report file access statistics. Format FSTAT ON file.name... Enable statistic collection FSTAT file.name... {L...",""],
["./ge.htm","GE","GE, &#62;=, =&#62; The GE selection clause operator compares a field or evaluated expression against another field, evaluated expression or literal value ...",""],
["./generate.htm","GENERATE","GENERATE The GENERATE command generates a QMBasic include record from a dictionary. Format GENERATE file.name where file.name is the name of the f...",""],
["./get_list.htm","GET.LIST","GET.LIST The GET.LIST command is used to restore a previously saved select list . Format GET.LIST list.name { TO list.no } where list.name is the ...",""],
["./get_stack.htm","GET.STACK","GET.STACK The GET.STACK command restores a previously saved command stack . Format GET.STACK {stack.name} where stack.name is the name of the save...",""],
["./glossary.htm","Glossary of Terms","Glossary of Terms Abort An event that occurs at a major application failure. Aborts can be generated by QM internally if it detects a serious erro...",""],
["./go.htm","GO","GO The GO command is used within paragraphs to jump to a labelled line. Format GO label{:} Any number of lines in a paragraph may be labelled. A l...",""],
["./grand_total.htm","GRAND.TOTAL","GRAND.TOTAL, GRAND-TOTAL, CAPTION The GRAND.TOTAL keyword (synonyms GRAND-TOTAL and CAPTION) specifies text to appear at the left edge of the gran...",""],
["./grant_key.htm","GRANT.KEY","GRANT.KEY The GRANT.KEY command grants access to a specific data encryption key. This command can only be executed by users with administrator rig...",""],
["./gt.htm","GT","GT, AFTER, GREATER, &#62; The GT selection clause operator compares a field or evaluated expression against another field, evaluated expression or lit...",""],
["./hdr_sup.htm","HDR.SUP","HDR.SUP, HDR-SUPP, SUPP The HDR.SUP display clause keyword suppresses the default page heading. The synonyms HDR-SUPP and SUPP can be used. Format...",""],
["./heading.htm","HEADING","HEADING, HEADER The HEADING keyword defines a page heading for the report. Format HEADING \"text\" where text is the heading text to appear on each ...",""],
["./help.htm","HELP","HELP The HELP command provides help on a wide variety of topics. This command is not available on the PDA version of QM. Format HELP {topic} where...",""],
["./hsm.htm","HSM","HSM The HSM command controls the Hot Spot Monitor performance monitoring tool. This command is not available on the PDA version of QM. Format HSM ...",""],
["./hush.htm","HUSH","HUSH The HUSH command suspends or enables output to the display. Format HUSH ON Suspend display output HUSH OFF Resume display output HUSH Toggle ...",""],
["./id_only.htm","ID.ONLY","ID.ONLY, ONLY The ID.ONLY keyword causes the query processor to ignore the default listing phrase and show only record ids. The synonym ONLY may b...",""],
["./id_sup.htm","ID.SUP","ID.SUP, ID-SUPP The ID.SUP display option keyword causes the record id to be omitted from the report. The synonym ID-SUPP may be used. Format ID.S...",""],
["./if.htm","IF","IF The IF command allows conditional execution of sentences within paragraphs. Format IF value.1 rel.op value.2 THEN sentence where value.1, value...",""],
["./inlineprompts.htm","Inline Prompts","Inline Prompts Inline prompts provide a means to prompt for data needed by a sentence or paragraph when it is executed. The DATA command does not ...",""],
["./installation.htm","Installation","Installation If you are going to try things out as you read this manual, the first thing we need to discuss is how to install your own version of ...",""],
["./interrupting_commands.htm","Interrupting Commands","Interrupting Commands It may be necessary to terminate a command because, perhaps, it is producing more output than expected or it is not function...",""],
["./intro.htm","Introduction to the QM Database","Introduction to the OpenQM Database OpenQM is a database management system that allows you to develop and run applications for your business or pe...",""],
["./itypeexpressions.htm","I-type expressions","I-Type Expressions The difference between a D-type and an I-type dictionary item is perhaps best illustrated by a simple example. A file might con...",""],
["./key_codes.htm","Character Values for Terminal Input","Character Values for Terminal Input The table below shows the keys that produce each character value on Windows systems using QMConsole, on all sy...",""],
["./label.htm","LABEL","LABEL The LABEL keyword specifies the label template record name for LIST.LABEL and SORT.LABEL . Format LABEL template.name LABEL NO.DEFAULT The f...",""],
["./language.htm","Multi-Language Applications","Multi-Language Applications QM includes support for text message output in multiple languages. The standard message library installed with QM cont...",""],
["./le.htm","LE","LE, &#60;=, =&#60; The LE selection clause operator compares a field or evaluated expression against another field, evaluated expression or literal value ...",""],
["./like.htm","LIKE","LIKE, MATCHES, MATCHING The LIKE selection clause operator compares a field or evaluated expression against another field, evaluated expression or...",""],
["./list.htm","LIST and SORT","LIST and SORT The LIST and SORT verbs produce reports from QM files. The LIST verb displays records in the order in which they are encountered in ...",""],
["./listf.htm","LISTF","LISTF The LISTF command lists all files defined in the VOC. Format LISTF {LPTR} The LISTF command is a sentence to list all F type VOC entries . T...",""],
["./listfl.htm","LISTFL","LISTFL The LISTFL command lists all files defined in the VOC that are local to the account. Format LISTFL {LPTR} The LISTFL command is a sentence ...",""],
["./listfr.htm","LISTFR","LISTFR The LISTFR command lists all files defined in the VOC that are remote to the account. Format LISTFR {LPTR} The LISTFR command is a sentence...",""],
["./listk.htm","LISTK","LISTK The LISTK command lists all keywords defined in the VOC. Format LISTK {LPTR} The LISTK command is a sentence to list all K type VOC entries ...",""],
["./listm.htm","LISTM","LISTM The LISTM command lists all menus defined in the VOC. Format LISTM {LPTR} The LISTM command is a sentence to list all M type VOC entries . T...",""],
["./listpa.htm","LISTPA","LISTPA The LISTPA command lists all paragraphs defined in the VOC. Format LISTPA {LPTR} The LISTPA command is a sentence to list all PA type VOC e...",""],
["./listph.htm","LISTPH","LISTPH The LISTPH command lists all phrases defined in the VOC. Format LISTPH {LPTR} The LISTPH command is a sentence to list all PH type VOC entr...",""],
["./listpq.htm","LISTPQ","LISTPQ The LISTPQ command lists all PROCs defined in the VOC. Format LISTPQ {LPTR} The LISTPQ command is a sentence to list all PQ type VOC entrie...",""],
["./listq.htm","LISTQ","LISTQ The LISTQ command lists all indirect file references defined in the VOC. Format LISTQ {LPTR} The LISTQ command is a sentence to list all Q t...",""],
["./listr.htm","LISTR","LISTR The LISTR command lists all remote items defined in the VOC. Format LISTR {LPTR} The LISTR command is a sentence to list all R type VOC entr...",""],
["./lists.htm","LISTS","LISTS The LISTS command lists all sentences defined in the VOC. Format LISTS {LPTR} The LISTS command is a sentence to list all S type VOC entries...",""],
["./listu.htm","LISTU","LISTU The LISTU command lists the users currently in QM. This command is not available on the PDA version of QM. Format LISTU The LISTU command di...",""],
["./listv.htm","LISTV","LISTV The LISTV command lists all verbs defined in the VOC. Format LISTV {LPTR} The LISTV command is a sentence to list all V type VOC entries . T...",""],
["./list_common.htm","LIST.COMMON","LIST.COMMON The LIST.COMMON command lists named common blocks. Format LIST.COMMON The LIST.COMMON command displays a list of all currently created...",""],
["./list_diff.htm","LIST.DIFF","LIST.DIFF The LIST.DIFF command creates a new named select list from the entries that appear in one named list but not in another named list. Form...",""],
["./list_files.htm","LIST.FILES","LIST.FILES The LIST.FILES command displays details of open files. Format LIST.FILES {DETAIL} The LIST.FILES command displays the number of files c...",""],
["./list_index.htm","LIST.INDEX","LIST.INDEX The LIST.INDEX command reports details of one or more alternate key indices . Format LIST.INDEX filename field(s) {STATISTICS} {DETAIL}...",""],
["./list_inter.htm","LIST.INTER","LIST.INTER The LIST.INTER command creates a new named select list from the entries that appear in both of two other named lists. Format LIST.INTER...",""],
["./list_item.htm","LIST.ITEM and SORT.ITEM","LIST.ITEM and SORT.ITEM The LIST.ITEM and SORT.ITEM verbs display data from QM files in its internal format. The LIST.ITEM verb displays records i...",""],
["./list_keys.htm","LIST.KEYS","LIST.KEYS The LIST.KEYS command lists details of encryption keys. Format LIST.KEYS {LPTR {unit}} LIST.KEYS filename {LPTR {unit}} where filename i...",""],
["./list_label.htm","LIST.LABEL and SORT.LABEL","LIST.LABEL and SORT.LABEL The LIST.LABEL and SORT.LABEL verbs are used to print address labels from QM files. The LIST.LABEL verb processes record...",""],
["./list_locks.htm","LIST.LOCKS","LIST.LOCKS The LIST.LOCKS command reports the state of the 64 system wide task locks. Format LIST.LOCKS The LIST.LOCKS command displays a table of...",""],
["./list_readu.htm","LIST.READU","LIST.READU The LIST.READU command displays details of file and record locks. Format LIST.READU {user} {DETAIL} {NO.PAGE} {LPTR {n}} {WAIT} where u...",""],
["./list_union.htm","LIST.UNION","LIST.UNION The LIST.UNION command creates a new named select list from the entries that appear in either of two other named lists. Items that appe...",""],
["./list_users.htm","LIST.USERS","LIST.USERS The LIST.USERS command lists users from the register of users for network security checks. User management is not applicable to the PDA...",""],
["./list_vars.htm","LIST.VARS","LIST.VARS The LIST.VARS command displays user @-variables. Format LIST.VARS {ALL} The LIST.VARS command displays the values of user defined @-vari...",""],
["./lock.htm","LOCK","LOCK The LOCK command sets a task lock. Format LOCK lock.number {NO.WAIT} where lock.number is the number of the task lock (0 to 63) to be set. NO...",""],
["./locking.htm","LOCKING","LOCKING The LOCKING keyword locks the file during a report, preventing updates. Format LOCKING The LOCKING keyword causes the query processor to t...",""],
["./locks.htm","Locks","Locks In order to prevent undesirable interaction between processes, QM provides a system of locks. Consider, for example, a process that reads a ...",""],
["./loginprocess.htm","The Login Process","The Login Process There are two stages to login; user authentication and process initialisation. The first applies only to network connections Use...",""],
["./login_port.htm","LOGIN.PORT","LOGIN.PORT The LOGIN.PORT command logs in a serial port from within another QM session. This command is currently only available on Windows system...",""],
["./logmsg.htm","LOGMSG","LOGMSG The LOGMSG command adds a line to the system error log. This statement has no effect on the PDA version of QM. Format LOGMSG text where tex...",""],
["./logout.htm","LOGOUT","LOGOUT The LOGOUT command terminates a QM process. Format LOGOUT {user} LOGOUT ALL where user is the user number of the process to terminate. Mult...",""],
["./logto.htm","LOGTO","LOGTO The LOGTO command moves to an alternative account directory without leaving QM. Format LOGTO name {RESET} where name is the name of the targ...",""],
["./loop.htm","LOOP / REPEAT","LOOP / REPEAT The LOOP and REPEAT commands define the top and bottom of a group of sentences to be repeated within a paragraph. Format LOOP senten...",""],
["./lptr.htm","LPTR","LPTR The LPTR keyword directs the output of the query to a printer. Format LPTR { unit } where unit is the print unit number. If omitted, print un...",""],
["./lt.htm","LT","LT, BEFORE, LESS, &#60; The LT selection clause operator compares a field or evaluated expression against another field, evaluated expression or liter...",""],
["./make_index.htm","MAKE.INDEX","MAKE.INDEX The MAKE.INDEX command creates and builds an alternate key index . It is equivalent to use of CREATE.INDEX followed by BUILD.INDEX . Fo...",""],
["./map.htm","MAP","MAP The MAP command produces a map of the system catalogue. Format MAP {ALL} {LPTR {n}} {FILE {file.name}} where ALL indicates that system entries...",""],
["./margin.htm","MARGIN","MARGIN The MARGIN keyword specifies the width of a blank left margin to appear in the report output. Format MARGIN width where width specifies the...",""],
["./matrix_file_io.htm","Matrix File I/O","Matrix File I/O QMBasic has two styles of file i/o that may be freely mixed within an application. Using READ and WRITE to transfer data using dyn...",""],
["./max.htm","MAX","MAX The MAX field qualifier keyword causes a field to be reported together with its maximum value. Format MAX field {field.qualifiers} where field...",""],
["./med.htm","MED","MED The MED command creates or modifies a menu definition. Format MED {file.name {menu.name}} where file.name identifies the file holding the menu...",""],
["./merge_list.htm","MERGE.LIST","MERGE.LIST The MERGE.LIST command creates a new active select list by merging two other lists according to one of three relational operators. Form...",""],
["./message.htm","MESSAGE","MESSAGE The MESSAGE command sends a message to selected other users. This command is not available on the PDA version of QM. Format MESSAGE user {...",""],
["./min.htm","MIN","MIN The MIN field qualifier keyword causes a field to be reported together with its minimum value. Format MIN field {field.qualifiers} {NO.NULLS} ...",""],
["./modify.htm","MODIFY","MODIFY The MODIFY command enters the QM record modification processor. Format MODIFY {DICT} file.name { field list } { id.list } where DICT indica...",""],
["./monitoring_the_system.htm","Monitoring the System","Monitoring the System QM provides several tools to aid System Administrators in monitoring the system and locating problems. LISTU Displays a list...",""],
["./multivalue_functions.htm","Multivalue Functions","Multivalue Functions The QMBasic language has many functions that provide multivalued equivalents of their more commonly used single valued counte...",""],
["./multi_value.htm","MULTI.VALUE","MULTI.VALUE, MULTIVALUED The MULTI.VALUE keyword is a field qualifier that forces the field to be processed as a multi-valued item. The synonym MU...",""],
["./mvintro.htm","What is a Multivalue Database?","What is a Multivalue Database? There are many different databases available but they all fall into a small number of basic types. One of these is ...",""],
["./ne.htm","NE","NE, NOT, #, &#60;&#62;, &#62;&#60; The NE selection clause operator compares a field or evaluated expression against another field, evaluated expression or litera...",""],
["./new_page.htm","NEW.PAGE","NEW.PAGE The NEW.PAGE display option keyword causes each record in a report to start on a new page. Format NEW.PAGE ",""],
["./nls.htm","NLS","NLS The NLS command sets or reports national language support settings. Format NLS Report all settings NLS { DEFAULT } Set defaults NLS { key } Re...",""],
["./no.htm","NO","NO The NO selection clause operator tests whether a field or evaluated expression is null. Format WITH NO field where field is the field or evalua...",""],
["./no_case.htm","NO.CASE","NO.CASE The NO.CASE keyword used in the SEARCH verb specifies that the string comparison is to be performed in a case insensitive manner. Format N...",""],
["./no_grand_total.htm","NO.GRAND.TOTAL","NO.GRAND.TOTAL The NO.GRAND.TOTAL phrase suppresses the grand total in a query report. Format NO.GRAND.TOTAL The NO.GRAND.TOTAL phrase suppresses ...",""],
["./no_index.htm","NO.INDEX","NO.INDEX The NO.INDEX keyword causes the query processor to ignore any index that would otherwise be used to handle the selection clause of the qu...",""],
["./no_match.htm","NO.MATCH","NO.MATCH The NO.MATCH keyword used in a SEARCH command specifies that the records to be selected must contain none of the given search strings. Fo...",""],
["./no_nulls.htm","NO.NULLS","NO.NULLS The NO.NULLS keyword suppresses null items. Format NO.NULLS The NO.NULLS keyword has three uses: 1. With the query processor AVERAGE , EN...",""],
["./no_page.htm","NO.PAGE","NO.PAGE, NOPAGE The NO.PAGE display option keyword suppresses the normal page end prompt. The synonym NOPAGE may be used. Format NO.PAGE The LIST ...",""],
["./no_split.htm","NO.SPLIT","NO.SPLIT The NO.SPLIT keyword causes the query processor to avoid splitting records across pages where possible. Format NO.SPLIT The NO.SPLIT caus...",""],
["./nselect.htm","NSELECT","NSELECT The NSELECT command refines a select list by removing items that are in a named file. Format NSELECT { DICT } file { FROM from.list } { TO...",""],
["./option.htm","OPTION","OPTION The OPTION command sets, clears or displays configurable options. To ease application portability, options that are not meaningful on a par...",""],
["./or.htm","OR","OR The OR selection clause operator links two selection criteria where either may be true for the record to be selected. Format WITH condition.1 O...",""],
["./output_pagination.htm","Output Pagination","Output Pagination Output to the display is automatically paginated, where appropriate, by inserting a prompt at the end of each page of output. Th...",""],
["./overlay.htm","OVERLAY","OVERLAY The OVERLAY option specifies a catalogued subroutine to emit a graphical page overlay. Format OVERLAY subr.name where subr.name is the nam...",""],
["./pageseq.htm","PAGESEQ","PAGESEQ The PAGESEQ option identifies a record that controls page numbering. Format PAGESEQ filename id where filename is the name of the file con...",""],
["./pan.htm","PAN","PAN The PAN keyword, used in reports directed to the display, permits the total width of the report to exceed that of the display by allowing the ...",""],
["./password.htm","PASSWORD","PASSWORD The PASSWORD command changes the password for a QM user on Windows 98/ME. User management is not applicable to the PDA version of QM. For...",""],
["./patterns.htm","Pattern Matching","Pattern Matching Pattern matching is a way to test whether data has a particular structure. It can be used for data validation and as a means to e...",""],
["./pause.htm","PAUSE","PAUSE The PAUSE command displays a \"Press return to continue\" prompt. Format PAUSE The PAUSE command, intended for use in paragraphs, pauses proce...",""],
["./pdebug.htm","PDEBUG","PDEBUG The PDEBUG command runs the phantom debugger. This command is not available on the PDA version of QM. Format PDEBUG {command} where command...",""],
["./pdump.htm","PDUMP","PDUMP The PDUMP command generates a process dump file for a named QM process. Format PDUMP userno where userno is the QM user number of the proces...",""],
["./percentage.htm","PERCENTAGE","PERCENTAGE, PERCENT, PCT, % The PERCENTAGE field qualifier keyword causes a field to be reported as a percentage of the total of the value of the ...",""],
["./permissions.htm","Permissions","Permissions QM uses the underlying operating system to manage processes, files, devices, etc. Therefore, all issues of access permissions ultimate...",""],
["./phantom.htm","PHANTOM","PHANTOM The PHANTOM command starts execution of a verb, sentence or paragraph as a background process. This command is not available on the PDA ve...",""],
["./printer.htm","PRINTER","PRINTER The PRINTER command provides control for print units. Format PRINTER {print.unit} action The print.unit argument identifies the print unit...",""],
["./printing.htm","Printing","Printing QM applications do not drive printing devices directly. Instead they reference numbered print units with no knowledge of where the output...",""],
["./processdumpfile.htm","Process Dump Files","Process Dump Files QM includes the option to generate a process dump file containing a detailed report of the state of the process. There are thre...",""],
["./pstat.htm","PSTAT","PSTAT The PSTAT command displays the status of one or all QM processes. This command is not available on the PDA version of QM. Format PSTAT { USE...",""],
["./pterm.htm","PTERM","PTERM The PTERM command sets or displays terminal characteristics. Format PTERM BINARY { ON &#166; OFF } PTERM BREAK { ON &#166; OFF } PTERM BREAK { n &#166; ^c ...",""],
["./qmbasic.htm","QMBasic","The QMBasic Programming Language There are times when the powerful facilities available using the standard commands of QM are not sufficient to me...",""],
["./qmbasicbyname.htm","QMBasic Statements and Functions by Name","QMBasic Statements and Functions by Name @(x,y) Terminal cursor movement and control ABORT Abort to command prompt ABORTE Abort to command prompt ...",""],
["./qmbasicbytype.htm","QMBasic Statements and Functions by Type","QMBasic Statements and Functions by Type Program Structure, Declaration and Assignment CLASS Declare a class module CLEAR Set all local variables ...",""],
["./qmbasic_assignmentstatements.htm","QMBasic - Assignment statements","QMBasic - Assignment Statements Variables may be assigned values by statements of the following forms var op expr Assign expr to var var[s,n] = ex...",""],
["./qmbasic_commonblocks.htm","QMBasic - Common blocks","QMBasic - Common Blocks Variables are normally available to all statements within a single QMBasic program or subroutine. Although the language pr...",""],
["./qmbasic_compilerdirectives.htm","QMBasic - Compiler Directives","QMBasic - Compiler Directives Compiler directives control the way in which the compiler processes the QMBasic source programs. They do not result ...",""],
["./qmbasic_expressionsandoperators_.htm","QMBasic - Expressions and operators","QMBasic - Expressions and Operators A QMBasic expression consists of one or more data items (constants or variables) linked by operators. constant...",""],
["./qmbasic_labels.htm","QMBasic - Labels","QMBasic - Labels Any statement of a QMBasic program may be labelled. A label may take one of three formats; a name of the same format as a variabl...",""],
["./qmbasic_limits.htm","QMBasic Limits","QMBasic Limits Number of local variables or elements in a matrix Dependant on system swap file size. Maximum file size Dynamic files may have up t...",""],
["./qmbasic_objects.htm","Object Oriented Programming","Object Oriented Programming QMBasic includes support for object orientated programming. Users familiar with other object oriented languages will f...",""],
["./qmbasic_overview.htm","QMBasic overview","QMBasic Overview QM applications are written using QMBasic. Unlike many other programming languages, the individual source modules are not linked ...",""],
["./qmbasic_scalarsmatricesanddynamicarrays.htm","QMBasic - Scalars, matrices and dynamic arrays","QMBasic - Scalars, Matrices and Dynamic Arrays QMBasic provides support for both scalar and matrix variables. A scalar variable is a simple value ...",""],
["./qmbasic_typeconversion.htm","QMBasic - Type conversion","QMBasic - Type Conversion QMBasic variables are of variant type, the stored type being determined by the context in which the value was set and co...",""],
["./qmbasic_variablenamesandvalues.htm","QMBasic - Variable names and values","QMBasic - Variable Names and Values Variable names must commence with a letter and may contain letters, digits, periods (full stops), percentage s...",""],
["./qmbd_catalogue.htm","$CATALOGUE compiler directive","$CATALOGUE Compiler Directive $CATALOGUE name {GLOBAL &#166; LOCAL} The $CATALOGUE directive (or the American spelling $CATALOG) causes the compiler to...",""],
["./qmbd_debug.htm","$DEBUG compiler directive","$DEBUG Compiler Directive $DEBUG The $DEBUG directive compiles the program in debug mode. This is an alternative to use of the DEBUGGING keyword t...",""],
["./qmbd_define.htm","$DEFINE compiler directive","$DEFINE Compiler Directive The $DEFINE directive is used to associate a value with a symbolic name at compile time. The standard include records i...",""],
["./qmbd_execute.htm","$EXECUTE compiler directive","$EXECUTE Compiler Directive The $EXECUTE directive executes a command during program compilation. The format of a $EXECUTE directive is $EXECUTE \"...",""],
["./qmbd_ifdef.htm","$IFDEF and $IFNDEF compiler directives","$IFDEF and $IFNDEF Compiler Directives The $IFDEF directive provides conditional compilation. The format of this directive is $IFDEF name ...state...",""],
["./qmbd_include.htm","$INCLUDE compiler directive","$INCLUDE Compiler Directive The $INCLUDE directive is used to direct the compiler to include text from another record. Include records may be in e...",""],
["./qmbd_list.htm","$LIST compiler directive","$LIST Compiler Directive The $LIST directive can be used to start, suspend and resume generation of a listing of the program and any associated er...",""],
["./qmbd_mode.htm","$MODE compiler directive","$MODE Compiler Directive The $MODE directive enables language options for improved compatibility with other multi-value databases. $MODE option wh...",""],
["./qmbd_nocase_strings.htm","$NOCASE.STRINGS compiler directive","$NOCASE.STRINGS Compiler Directive $NOCASE.STRINGS Compiles the program using case insensitive string operations. This directive must appear befor...",""],
["./qmbd_no_catalogue.htm","$NO.CATALOGUE compiler directive","$NO.CATALOGUE compiler directive $NO.CATALOGUE The $NO.CATALOGUE directive (or the American spelling $NO.CATALOG) specifies that a QMBasic program...",""],
["./qmbd_qmcall.htm","$QMCALL compiler directive","$QMCALL Compiler Directive For processes running with the QMCLIENT configuration parameter set to 2, this directive makes the subroutine in which ...",""],
["./qmbs_abspath.htm","!ABSPATH()","!ABSPATH() The !ABSPATH() subroutine forms an absolute pathname from a directory and file path. Format CALL !ABSPATH(path, dir, file) where path i...",""],
["./qmbs_atvar.htm","!ATVAR()","!ATVAR() The !ATVAR() subroutine retrieves the value of an @-variable. Format CALL !ATVAR(value, name) where value is the returned value. name is ...",""],
["./qmbs_errtext.htm","!ERRTEXT()","!ERRTEXT() The !ERRTEXT() subroutine returns a text description of an error number. Format CALL !ERRTEXT(text, errno) where text is the returned d...",""],
["./qmbs_getpu.htm","!GETPU()","!GETPU() The !GETPU() subroutine gets the characteristics of a print unit. Format CALL !GETPU(key, unit, value, status) where key identifies the p...",""],
["./qmbs_parser.htm","!PARSER()","!PARSER() The !PARSER() subroutine parses a command line. Format CALL !PARSER(key, type, string, keyword {, voc.rec}) where key identifies the ope...",""],
["./qmbs_pathtkn.htm","!PATHTKN()","!PATHTKN() The !PATHTKN() subroutine processes special tokens in a VOC or ACCOUNTS file pathname. Format CALL !PATHTKN(inpath, outpath) where inpa...",""],
["./qmbs_pcl.htm","!PCL()","!PCL() The !PCL () subroutine constructs PCL control strings for various useful operations. It is intended for use as a series of functions define...",""],
["./qmbs_pick.htm","!PICK()","!PICK() The !PICK() subroutine displays a list of entries from which a user may select one. Format CALL !PICK(item, top.line, item.list, title, po...",""],
["./qmbs_picklist.htm","!PICKLIST()","!PICKLIST() The !PICKLIST() subroutine displays a list of entries from which a user may select one. Format CALL !PICKLIST(value, list, return.col,...",""],
["./qmbs_qmclient.htm","!QMCLIENT","!QMCLIENT The !QMCLIENT class module provides an object oriented interface to the QMClient API for use within QMBasic programs. An QMClient object...",""],
["./qmbs_screen.htm","!SCREEN()","!SCREEN() The !SCREEN() subroutine performs screen based input using a screen definition created using the SCRB command. Format CALL !SCREEN(scrn,...",""],
["./qmbs_setpu.htm","!SETPU()","!SETPU() The !SETPU() subroutine sets the characteristics of a print unit. Format CALL !SETPU(key, unit, value, status) where key identifies the p...",""],
["./qmbs_setvar.htm","!SETVAR()","!SETVAR() The !SETVAR() subroutine sets the value of a user defined @-variable. It can also update some standard @variables. Format CALL !SETVAR(n...",""],
["./qmbs_sort.htm","!SORT()","!SORT() The !SORT() subroutine sorts the elements of a dynamic array according to a specified sorting rule. Format CALL !SORT(in.list, out.list, s...",""],
["./qmbs_username.htm","!USERNAME()","!USERNAME() The !USERNAME() subroutine returns the user login name for a given QM user number. Format CALL !USERNAME(name, userno) or DEFFUN USERN...",""],
["./qmbs_userno.htm","!USERNO()","!USERNO() The !USERNO() subroutine returns a list of QM user numbers for a given user name. Format CALL !USERNO(userno, username) or DEFFUN USERNO...",""],
["./qmbs_vocrec.htm","!VOCREC()","!VOCREC() The !VOCREC() subroutine reads a VOC record, following links to remote records. Format CALL !VOCREC(rec, id) or DEFFUN VOCREC(id) CALLIN...",""],
["./qmb_abort.htm","ABORT","ABORT, ABORTE, ABORTM The ABORT statement terminates the current program, returning to the command prompt. ABORTE and ABORTM provide compatibility...",""],
["./qmb_abs.htm","ABS()","ABS(), ABSS() The ABS() function returns the absolute (positive) value of a numeric expression. The ABSS() function is similar to ABS() but operat...",""],
["./qmb_accept_socket_connection.htm","ACCEPT.SOCKET.CONNECTION()","ACCEPT.SOCKET.CONNECTION() The ACCEPT.SOCKET.CONNECTION() function opens a data socket on a server to handle an incoming connection. Format ACCEPT...",""],
["./qmb_acos.htm","ACOS()","ACOS() The ACOS() function returns the arc-cosine (inverse cosine) of a value. Format ACOS(expr) where expr evaluates to a number or a numeric arr...",""],
["./qmb_alpha.htm","ALPHA()","ALPHA() The ALPHA() function tests whether a string contains only alphabetic characters. Format ALPHA(string) where string evaluates to the string...",""],
["./qmb_ands.htm","ANDS()","ANDS() The ANDS() function performs a logical AND operation on successive elements of a dynamic array, returning a similarly structured dynamic ar...",""],
["./qmb_arg.htm","ARG ()","ARG() The ARG() function returns and argument value based on its position in the argument list. It is intended for use with subroutines declared w...",""],
["./qmb_arg_count.htm","ARG.COUNT()","ARG.COUNT() The ARG.COUNT() function returns the number of arguments passed into the current subroutine. It is intended for use with subroutines d...",""],
["./qmb_ascii.htm","ASCII()","ASCII() The ASCII() function converts an EBCDIC string to ASCII. Format ASCII(expr) where expr evaluates to the string to be converted. The ASCII(...",""],
["./qmb_asin.htm","ASIN()","ASIN() The ASIN() function returns the arc-sine (inverse sine) of a value. Format ASIN(expr) where expr evaluates to a number or a numeric array. ...",""],
["./qmb_assigned.htm","ASSIGNED()","ASSIGNED() The ASSIGNED() function tests whether a variable is assigned. Format ASSIGNED(var) where var is the variable to be tested. All QMBasic ...",""],
["./qmb_atan.htm","ATAN()","ATAN() The ATAN() function returns the arc-tangent (inverse tangent) of a value. Format ATAN(expr) where expr evaluates to a number or a numeric a...",""],
["./qmb_at_fun.htm","@(x,y) Function","@(x, y) Function The @(x, y) function is used to control the format of displayed output. Format @(col {, line}) Cursor movement @(mode {, arg}) De...",""],
["./qmb_begin_transaction.htm","BEGIN TRANSACTION","BEGIN TRANSACTION The BEGIN TRANSACTION statement marks the start of a new transaction. Format BEGIN TRANSACTION {statements} COMMIT / ROLLBACK .....",""],
["./qmb_bindkey.htm","BINDKEY()","BINDKEY() The BINDKEY() function sets, removes, queries, saves or restores key bindings. Format BINDKEY(key.string, action) where key.string The c...",""],
["./qmb_bitand.htm","BITAND()","BITAND() The BITAND() function forms the bitwise logical AND of two integer values. Format BITAND(expr1, expr2) where expr1 and expr2 evaluate to ...",""],
["./qmb_bitnot.htm","BITNOT()","BITNOT() The BITNOT() function forms the bitwise logical NOT of an integer value. Format BITNOT(expr) where expr evaluates to an integer. The BITN...",""],
["./qmb_bitor.htm","BITOR()","BITOR() The BITOR() function forms the bitwise logical OR of two integer values. Format BITOR(expr1, expr2) where expr1 and expr2 evaluate to inte...",""],
["./qmb_bitreset.htm","BITRESET()","BITRESET() The BITRESET() function turns off a specified bit in an integer value. Format BITRESET(expr, bit) where expr evaluates to the value in ...",""],
["./qmb_bitset.htm","BITSET()","BITSET() The BITSET() function turns on a specified bit in an integer value. Format BITSET(expr, bit) where expr evaluates to the value in which t...",""],
["./qmb_bittest.htm","BITTEST()","BITTEST() The BITTEST() function tests the state of a specified bit in an integer value. Format BITTEST(expr, bit) where expr evaluates to the val...",""],
["./qmb_bitxor.htm","BITXOR()","BITXOR() The BITXOR() function forms the bitwise logical exclusive-OR of two integer values. Format BITXOR(expr1, expr2) where expr1 and expr2 eva...",""],
["./qmb_break.htm","BREAK","BREAK The BREAK statement allows the action of the break key to be disabled during program execution. Format BREAK {KEY} OFF BREAK {KEY} ON BREAK ...",""],
["./qmb_call.htm","CALL, ENTER","CALL, ENTER The CALL statement calls a catalogued subroutine. The ENTER statement is a synonym for CALL unless the PICK.ENTER option of the $MODE ...",""],
["./qmb_case.htm","CASE","CASE The CASE statement provides conditional execution dependant on the result of expression evaluation. Format BEGIN CASE CASE expr statement(s) ...",""],
["./qmb_catalogued.htm","CATALOGUED()","CATALOGUED() The CATALOGUED() function determines whether a subroutine can be found using the search process described for the CALL statement. For...",""],
["./qmb_cats.htm","CATS()","CATS() The CATS() function concatenates corresponding elements of a dynamic array. Format CATS(string1, string2) where string1 is the string to wh...",""],
["./qmb_chain.htm","CHAIN","CHAIN The CHAIN statement terminates the current program and executes a command. Format CHAIN expr where expr evaluates to a command. The current ...",""],
["./qmb_change.htm","CHANGE()","CHANGE(), SWAP() The CHANGE() function replaces occurrences of a substring within a string by another substring. The synonym SWAP() can be used. F...",""],
["./qmb_char.htm","CHAR()","CHAR() The CHAR() function returns the character with a given ASCII value. Format CHAR(seq) where seq evaluates to an integer in the range 0 to 25...",""],
["./qmb_class.htm","CLASS","CLASS The CLASS statement declares a class module. Format CLASS name {MAX.ARGS limit} {INHERITS class.list} where name is the name of the module. ...",""],
["./qmb_clear.htm","CLEAR","CLEAR The CLEAR statement sets all local variables to zero. Format CLEAR All local variables, including all elements of matrices, are set to zero....",""],
["./qmb_clearcommon.htm","CLEARCOMMON","CLEARCOMMON The CLEARCOMMON statement sets all variables in the unnamed common area to zero. Format CLEARCOMMON CLEAR COMMON All variables in the ...",""],
["./qmb_cleardata.htm","CLEARDATA","CLEARDATA The CLEARDATA statement clears any data stored by previous DATA statements or DATA verbs and not yet processed by INPUT statements. Form...",""],
["./qmb_clearfile.htm","CLEARFILE","CLEARFILE The CLEARFILE statement clears a file previously opened using the OPEN statement, deleting all records. Format CLEARFILE file.var {ON ER...",""],
["./qmb_clearinput.htm","CLEARINPUT","CLEARINPUT, INPUTCLEAR The CLEARINPUT statement clears any keyboard data that has been entered but not yet processed by INPUT or KEYIN() statement...",""],
["./qmb_clearselect.htm","CLEARSELECT","CLEARSELECT The CLEARSELECT statement clears one or all select lists. Format CLEARSELECT {list.no} CLEARSELECT ALL where list.no evaluates to the ...",""],
["./qmb_close.htm","CLOSE","CLOSE The CLOSE statement closes a file previously opened using the OPEN or OPENPATH statement. Format CLOSE file.var {ON ERROR statement(s)} wher...",""],
["./qmb_closeseq.htm","CLOSESEQ","CLOSESEQ The CLOSESEQ statement closes an item previously opened using OPENSEQ . Format CLOSESEQ file.var {ON ERROR statement(s)} where file.var i...",""],
["./qmb_close_socket.htm","CLOSE.SOCKET","CLOSE.SOCKET The CLOSE.SOCKET statement closes a socket. Format CLOSE.SOCKET skt where skt is the socket variable corresponding to the socket to b...",""],
["./qmb_col1.htm","COL1()","COL1() The COL1() function returns the character position immediately preceding the substring extracted by the last FIELD() function. Format COL1(...",""],
["./qmb_col2.htm","COL2()","COL2() The COL2() function returns the character position immediately following the substring extracted by the last FIELD() function. Format COL2(...",""],
["./qmb_common.htm","COMMON","COMMON The COMMON statement declares variables in a common block. Format COMMON {/name/} var1 {,var2...} where name is the name of the common bloc...",""],
["./qmb_compare.htm","COMPARE()","COMPARE() The COMPARE() function compares two strings using the same rules as the LOCATE statement and the SORT verb. Format COMPARE(string1, stri...",""],
["./qmb_config.htm","CONFIG()","CONFIG() The CONFIG() function returns the value of a configuration parameter. Format CONFIG(param) where param is the name of the parameter to be...",""],
["./qmb_connect_port.htm","CONNECT.PORT()","CONNECT.PORT() The CONNECT.PORT() function converts a phantom process into an interactive session, using a serial port as its terminal device. Thi...",""],
["./qmb_continue.htm","CONTINUE","CONTINUE The CONTINUE statement continues execution of the next cycle of a LOOP/REPEAT or FOR/NEXT structure. Format CONTINUE The CONTINUE stateme...",""],
["./qmb_convert.htm","CONVERT","CONVERT, CONVERT() The CONVERT statement and CONVERT() function replace selected characters by others in a string. The CONVERT statement performs ...",""],
["./qmb_cos.htm","COS()","COS() The COS() function returns the cosine of a value. Format COS(expr) where expr evaluates to a number or a numeric array. The COS() function r...",""],
["./qmb_count.htm","COUNT()","COUNT(), COUNTS() The COUNT() function counts occurrences of a substring within a string. The COUNTS() function is similar to COUNT() but operates...",""],
["./qmb_create.htm","CREATE","CREATE The CREATE statement creates an empty directory file record after a previous OPENSEQ has reported that the record did not exist. Format CRE...",""],
["./qmb_create_file.htm","CREATE.FILE","CREATE.FILE The CREATE.FILE statement creates the operating system representation of a directory or dynamic hash file. Format CREATE.FILE path {DI...",""],
["./qmb_create_server_socket.htm","CREATE.SERVER.SOCKET","CREATE.SERVER.SOCKET() The CREATE.SERVER.SOCKET() function creates a server socket on which a program may wait for incoming connections. Format CR...",""],
["./qmb_crop.htm","CROP()","CROP() The CROP() function removes redundant mark characters from a string. Format CROP(string) where string evaluates to the string from which ma...",""],
["./qmb_csvdq.htm","CSVDQ()","CSVDQ() The CSVDQ() function dequotes a CSV (comma separated variable) string. Format CSVDQ(string {, delimiter}) where string is the string to be...",""],
["./qmb_data.htm","DATA","DATA The DATA statement adds one or more items to the input data queue Format DATA expr{, expr...} where expr evaluates to the value to be added t...",""],
["./qmb_date.htm","DATE()","DATE() The DATE() function returns the internal value of the current date. Format DATE() The DATE() function returns the day number of the current...",""],
["./qmb_dcount.htm","DCOUNT()","DCOUNT() The DCOUNT() function counts delimited substrings within a string. Format DCOUNT(string, delimiter) where string evaluates to the string ...",""],
["./qmb_debug.htm","DEBUG","DEBUG The DEBUG statement enters the interactive debugger. Format DEBUG The DEBUG statement enters debug mode for the program in which it was exec...",""],
["./qmb_debugger.htm","QMBasic Debugger","QMBasic Debugger The QM interactive debugger enables the developer to step through an application program in a convenient manner, stopping at desi...",""],
["./qmb_decrypt.htm","DECRYPT()","DECRYPT() The DECRYPT() function decrypts data that has been encrypted for secure storage or transmission. Format DECRYPT(data, key) where data is...",""],
["./qmb_deffun.htm","DEFFUN","DEFFUN The DEFFUN statement defines a function. Format DEFFUN name {(arg1 {,arg2 ...})} {CALLING \"subr\" &#166; LOCAL} {VAR.ARGS} {KEY key} where name i...",""],
["./qmb_del.htm","DEL","DEL, DELETE() The DEL statement and DELETE() function delete a field, value or subvalue from a dynamic array. Format DEL dyn.array&#60;field {, value ...",""],
["./qmb_delete.htm","DELETE","DELETE, DELETEU The DELETE statement deletes a record from an open file. The DELETEU statement is similar but it preserves locks. Format DELETE fi...",""],
["./qmb_deletelist.htm","DELETELIST","DELETELIST The DELETELIST statement deletes a select list from the $SAVEDLISTS file. Format DELETELIST name where name is the name of the $SAVEDLI...",""],
["./qmb_deleteseq.htm","DELETESEQ","DELETESEQ The DELETESEQ statement deletes an operating system file. Format DELETESEQ filename, id {ON ERROR statement(s)} {THEN statement(s)} {ELS...",""],
["./qmb_dim.htm","DIMENSION","DIMENSION, DIM The DIMENSION statement is used to set the dimensions of a matrix. The short form DIM may be used in place of DIMENSION. Format DIM...",""],
["./qmb_dir.htm","DIR()","DIR() The DIR() function returns the contents of an operating system directory. Format DIR(pathname) where pathname identifies the operating syste...",""],
["./qmb_disinherit.htm","DISINHERIT","DISINHERIT The DISINHERIT statement used in a class module removes an inherited object. Format DISINHERIT object where object is the object variab...",""],
["./qmb_display.htm","DISPLAY","DISPLAY, CRT The DISPLAY statement sends data to the display. The synonym CRT can be used in place of DISPLAY. Format DISPLAY {print.list} where p...",""],
["./qmb_div.htm","DIV()","DIV() The DIV() function returns the quotient from a division operation. Format DIV(dividend, divisor) where dividend evaluates to a number. divis...",""],
["./qmb_downcase.htm","DOWNCASE()","DOWNCASE() The DOWNCASE() function returns a string with all letters converted to lower case. Format DOWNCASE(string) where string evaluates to th...",""],
["./qmb_dparse.htm","DPARSE and DPARSE.CSV","DPARSE, DPARSE.CSV The DPARSE splits the elements of a delimited string into other variables. DPARSE.CSV is similar but unquotes strings according...",""],
["./qmb_dtx.htm","DTX()","DTX() The DTX() function converts a number to hexadecimal. Format DTX(expr {, expr}) where expr evaluates to the number to be converted. min.width...",""],
["./qmb_ebcdic.htm","EBCDIC()","EBCDIC() The EBCDIC() function converts an ASCII string to EBCDIC. Format EBCDIC(expr) where expr evaluates to the string to be converted. The EBC...",""],
["./qmb_echo.htm","ECHO","ECHO The ECHO statement enables or disables echoing of keyboard input. Format ECHO OFF ECHO ON ECHO expr where expr evaluates to a number. Keyboar...",""],
["./qmb_encrypt.htm","ENCRYPT()","ENCRYPT() The ENCRYPT() function encrypts data for secure storage or transmission. Format ENCRYPT(data, key) where data is the string to be encryp...",""],
["./qmb_end.htm","END","END The END statement terminates a program, subroutine or a block of statements conditioned by the THEN, ELSE, LOCKED or ON ERROR keywords. Format...",""],
["./qmb_env.htm","ENV()","ENV() The ENV() function retrieves an operating system environment variable. Format ENV(var.name) where var.name is the name of the variable to be...",""],
["./qmb_eqs.htm","EQS()","EQS() The EQS() function processes two dynamic arrays, returning a similarly structured result array indicating whether corresponding elements are...",""],
["./qmb_equate.htm","EQUATE","EQUATE, EQU The EQUATE statement defines a symbolic name to represent a constant or reference to a matrix element. Format EQUATE name TO value EQU...",""],
["./qmb_errmsg.htm","ERRMSG","ERRMSG The ERRMSG statement displays a Pick style message from the ERRMSG file. Format ERRMSG msg.id {, arg...} where msg.id evaluates to the id o...",""],
["./qmb_execute.htm","EXECUTE","EXECUTE, PERFORM The EXECUTE statement enables a QMBasic program to execute any command. The synonym PERFORM can be used in place of EXECUTE. Form...",""],
["./qmb_exit.htm","EXIT","EXIT The EXIT statement terminates execution of a LOOP/REPEAT or FOR/NEXT structure. Format EXIT The EXIT statement is equivalent to a jump to the...",""],
["./qmb_exp.htm","EXP()","EXP() The EXP() function returns the exponential (the natural anti-log) of a value. Format EXP(expr) where expr evaluates to a number or a numeric...",""],
["./qmb_extract.htm","EXTRACT()","EXTRACT() The EXTRACT() function extracts a field, value or subvalue from a dynamic array. Format EXTRACT(dyn.array, field {, value {, subvalue}})...",""],
["./qmb_field.htm","FIELD()","FIELD(), FIELDS() The FIELD() function returns one or more delimited substrings from a string. The FIELDS() function is similar to FIELD() but ope...",""],
["./qmb_fieldstore.htm","FIELDSTORE()","FIELDSTORE() The FIELDSTORE() function provides delimited substring assignment. Format FIELDSTORE(string, delimiter, i, n, rep.string) where strin...",""],
["./qmb_file.htm","FILE","FILE The FILE statement provides a way to reference data in files using field names defined in the dictionary. This statement is provided for comp...",""],
["./qmb_fileinfo.htm","FILEINFO()","FILEINFO() The FILEINFO() function returns information about an open file. Format FILEINFO(file.var, key) where file.var is the file variable asso...",""],
["./qmb_filelock.htm","FILELOCK","FILELOCK The FILELOCK statement sets a file lock on a file. Format FILELOCK file.var {ON ERROR statement(s)} {LOCKED statement(s)} where file.var ...",""],
["./qmb_fileunlock.htm","FILEUNLOCK","FILEUNLOCK The FILEUNLOCK statement releases a file lock previously obtained using the FILELOCK statement. Format FILEUNLOCK file.var {ON ERROR st...",""],
["./qmb_find.htm","FIND","FIND The FIND statement searches a dynamic array for a given string in any position. Format FIND string IN dyn.array {, occurrence} SETTING field{...",""],
["./qmb_findstr.htm","FINDSTR","FINDSTR The FINDSTR statement searches a dynamic array for a given substring in any position. Format FINDSTR string IN dyn.array {, occurrence} SE...",""],
["./qmb_flush.htm","FLUSH","FLUSH The FLUSH statement flushes the internal buffers for a directory file record previously opened for sequential access. Format FLUSH file.var ...",""],
["./qmb_fmt.htm","FMT()","FMT(), FMTS() The FMT() function performs data formatting according to a format template. It is typically used to convert data for display or prin...",""],
["./qmb_fold.htm","FOLD() and FOLDS()","FOLD(), FOLDS() The FOLD() function breaks a string into field mark delimited sections no longer than a given width, placing breaks on spaces wher...",""],
["./qmb_footing.htm","FOOTING","FOOTING The FOOTING statement defines text to be printed or displayed at the foot of each page of output. Format FOOTING {ON print.unit} text wher...",""],
["./qmb_for.htm","FOR / NEXT","FOR / NEXT The FOR / NEXT statement defines a group of statements to be executed with an iterative control variable. Format FOR var = start.expr T...",""],
["./qmb_formlist.htm","FORMLIST","FORMLIST The FORMLIST statement creates a select list from a dynamic array. Format FORMLIST dyn.array {TO list.no} where dyn.array evaluates to th...",""],
["./qmb_function.htm","FUNCTION","FUNCTION The FUNCTION statement introduces a user written. Format FUNCTION name{(arg1 {, arg2...}) {VAR.ARGS}} where name is the name of the funct...",""],
["./qmb_ges.htm","GES()","GES() The GES() function processes two dynamic arrays, returning a similarly structured result array indicating whether elements of the first arra...",""],
["./qmb_getlist.htm","GETLIST","GETLIST The GETLIST statement restores a select list from the $SAVEDLISTS file. Format GETLIST name {TO list.no} {THEN statement(s)} {ELSE stateme...",""],
["./qmb_getnls.htm","GETNLS()","GETNLS() The GETNLS() function returns the value of a national language support parameter. Format GETNLS(key) where key identifies the parameter t...",""],
["./qmb_getpu.htm","GETPU()","GETPU() The GETPU() function gets the characteristics of a print unit. Format GETPU(key, unit) where key identifies the parameter to retrieved. Th...",""],
["./qmb_getrem.htm","GETREM()","GETREM() The GETREM() function returns the remove pointer position into a string. Format GETREM(string) where string is the string for which the r...",""],
["./qmb_get_messages.htm","GET.MESSAGES()","GET.MESSAGES() The GET.MESSAGES() function returns any messages currently queued for display. Format GET.MESSAGES() The GET.MESSAGES() function al...",""],
["./qmb_get_port_params.htm","GET.PORT.PARAMS()","GET.PORT.PARAMS() The GET.PORT.PARAMS() function retrieves the communications parameters for a serial port. This function is not available on the ...",""],
["./qmb_gosub.htm","GOSUB","GOSUB The GOSUB statement calls an internal subroutine. Format GOSUB label{:} GOSUB label{:}(args) where label is the label attached to the statem...",""],
["./qmb_goto.htm","GOTO","GOTO The GOTO statement continues program execution at a given label. Format GOTO label{:} GO {TO} label{:} where label is the label attached to t...",""],
["./qmb_gts.htm","GTS()","GTS() The GTS() function processes two dynamic arrays, returning a similarly structured result array indicating whether elements of the first arra...",""],
["./qmb_heading.htm","HEADING","HEADING The HEADING statement defines text to be printed or displayed at the top of each page of output. Format HEADING {NO.EJECT} {ON print.unit}...",""],
["./qmb_hush.htm","HUSH","HUSH The HUSH statement enables or disables display output. Format HUSH OFF {SETTING var} HUSH ON {SETTING var} HUSH expr {SETTING var} where expr...",""],
["./qmb_iconv.htm","ICONV()","ICONV(), ICONVS() The ICONV() function performs input conversion. Data is converted from its external representation to the internal form. This fu...",""],
["./qmb_idiv.htm","IDIV()","IDIV() The IDIV() function divides one integer by another and returns an integer result. Format IDIV(dividend, divisor) where dividend evaluates t...",""],
["./qmb_if.htm","IF /THEN / ELSE","IF / THEN / ELSE The IF statement provides conditional execution of one or more statements. Format IF expr {THEN statement(s)} {ELSE statement(s)}...",""],
["./qmb_ifs.htm","IFS()","IFS() The IFS() function returns a dynamic array constructed from elements chosen from two other dynamic arrays depending on the content of a thir...",""],
["./qmb_in.htm","IN","IN The IN statement reads a single byte from the terminal with an optional timeout. Format IN var {FOR timeout {THEN statement(s)} {ELSE statement...",""],
["./qmb_index.htm","INDEX()","INDEX(), INDEXS() The INDEX() function returns the position of a specified occurrence of a substring within a string. The INDEXS() function is sim...",""],
["./qmb_indices.htm","INDICES()","INDICES() The INDICES() function returns information about alternate key indices . Format INDICES(file.var) To retrieve a list of indices INDICES(...",""],
["./qmb_inherit.htm","INHERIT","INHERIT The INHERIT statement used in a class module makes the public variables, functions and subroutines of another object visible as part of th...",""],
["./qmb_inmat.htm","INMAT()","INMAT() The INMAT() function provides qualifying information after certain statements are executed. Format INMAT({mat}) where mat is the name of a...",""],
["./qmb_input.htm","INPUT","INPUT The INPUT statement enables entry of data from the keyboard or from previously stored DATA statements. Format INPUT var {, length} {_} {:} {...",""],
["./qmb_inputcsv.htm","INPUTCSV","INPUTCSV The INPUTCSV statement enables entry of CSV format data from the keyboard or from previously stored DATA statements. Format INPUTCSV var1...",""],
["./qmb_inputfield.htm","INPUTFIELD","INPUTFIELD The INPUTFIELD statement enables entry of data from the keyboard at a specific screen position or from previously stored DATA statement...",""],
["./qmb_input_at.htm","INPUT @","INPUT @ The INPUT @ statement enables entry of data from the keyboard at a specific screen position or from previously stored DATA statements. For...",""],
["./qmb_ins.htm","INS","INS, INSERT() The INS statement and INSERT() function insert a field, value or subvalue into a dynamic array. Format INS string BEFORE dyn.array&#60;f...",""],
["./qmb_int.htm","INT()","INT() The INT() function returns the integer part of a value. Format INT(expr) where expr evaluates to a number or a numeric array. The INT() func...",""],
["./qmb_itype.htm","ITYPE()","ITYPE() The ITYPE() function executes a compiled I or C-type dictionary record or an A or S-type with a correlative. Format ITYPE(itype) where ity...",""],
["./qmb_keycode.htm","KEYCODE()","KEYCODE() The KEYCODE() function reads a single keystroke from the keyboard. Format KEYCODE({timeout}) The KEYCODE() function pauses program execu...",""],
["./qmb_keyedit.htm","KEYEDIT","KEYEDIT The KEYEDIT statement defines editing keys for use with INPUT @ . Format KEYEDIT (action, key), (action, key), ... where action identifies...",""],
["./qmb_keyexit.htm","KEYEXIT","KEYEXIT The KEYEXIT statement defines exit keys for use with INPUT @ . Format KEYEXIT (action, key), (action, key), ... where action is a user def...",""],
["./qmb_keyin.htm","KEYIN()","KEYIN(), KEYINC(), KEYINR() The KEYIN(), KEYINC() and KEYINR() functions read a single keystroke from the keyboard. Format KEYIN({timeout}) KEYINC...",""],
["./qmb_keyready.htm","KEYREADY()","KEYREADY() The KEYREADY() function tests for data entered at the keyboard. Format KEYREADY() The KEYREADY() function tests whether characters have...",""],
["./qmb_keytrap.htm","KEYTRAP","KEYTRAP The KEYTRAP statement defines trap keys for use with INPUT @ . Format KEYTRAP (action, key), (action, key), ... where action is a user def...",""],
["./qmb_len.htm","LEN()","LEN(), LENS() The LEN() function returns the length of a string. The LENS() function is similar to LEN() but operates on successive elements of a ...",""],
["./qmb_les.htm","LES()","LES() The LES() function processes two dynamic arrays, returning a similarly structured result array indicating whether elements of the first arra...",""],
["./qmb_listindex.htm","LISTINDEX()","LISTINDEX() The LISTINDEX() function returns the position of an item in a delimited list. Format LISTINDEX(list, delimiter, item) where list is th...",""],
["./qmb_ln.htm","LN()","LN() The LN() function returns the natural log of a value. Format LN(expr) where expr evaluates to a number or a numeric array. The LN() function ...",""],
["./qmb_local.htm","LOCAL","LOCAL The LOCAL statement introduces an internal function or subroutine that may have private local variables. Format LOCAL {FUNCTION &#166; SUBROUTINE...",""],
["./qmb_locate.htm","LOCATE","LOCATE, LOCATE() The LOCATE statement searches a dynamic array for a given field, value or subvalue. The LOCATE() function provides similar capabi...",""],
["./qmb_lock.htm","LOCK","LOCK The LOCK statement obtains one of 64 system wide task locks. Format LOCK lock.num {THEN statement(s)} {ELSE statement(s)} where lock.num eval...",""],
["./qmb_logmsg.htm","LOGMSG","LOGMSG The LOGMSG statement adds a line to the system error log. This statement has no effect on the PDA version of QM. Format LOGMSG text where t...",""],
["./qmb_loop.htm","LOOP / REPEAT","LOOP / REPEAT The LOOP statement introduces a sequence of statements to be executed repeatedly. Format LOOP {statement(s)} {WHILE expr} {UNTIL exp...",""],
["./qmb_lower.htm","LOWER()","LOWER() The LOWER() function converts mark characters in a string to the next lower level mark. Format LOWER(string) where string evaluates to the...",""],
["./qmb_lts.htm","LTS()","LTS() The LTS() function processes two dynamic arrays, returning a similarly structured result array indicating whether elements of the first arra...",""],
["./qmb_mark_mapping.htm","MARK.MAPPING","MARK.MAPPING The MARK.MAPPING statement determines how field marks are handled when reading or writing from a directory file. Format MARK.MAPPING ...",""],
["./qmb_mat.htm","MAT","MAT The MAT statement assigns a value to all elements of a matrix or copies one matrix to another. Format MAT matrix = expr MAT matrix = MAT src.m...",""],
["./qmb_matbuild.htm","MATBUILD","MATBUILD The MATBUILD statement constructs a dynamic array from the elements of a matrix. Format MATBUILD var FROM mat {, start.expr {, end.expr} ...",""],
["./qmb_matchfield.htm","MATCHFIELD","MATCHFIELD The MATCHFIELD() function extracts a portion of a string that matches a pattern element. Format MATCHFIELD(string, pattern, element) wh...",""],
["./qmb_matparse.htm","MATPARSE","MATPARSE The MATPARSE statement breaks a delimited string into component substrings, assigning each to an element of a matrix. Format MATPARSE mat...",""],
["./qmb_matread.htm","MATREAD","MATREAD, MATREADL, MATREADU The MATREAD statement reads a record from a file, assigning each field to an element of a matrix. The MATREADL stateme...",""],
["./qmb_matreadcsv.htm","MATREADCSV","MATREADCSV The MATREADCSV statement reads a CSV format line of text from a directory file record previously opened for sequential access and parse...",""],
["./qmb_matwrite.htm","MATWRITE","MATWRITE, MATWRITEU The MATWRITE statement builds a record from successive elements of a matrix and writes this to a file. The MATWRITEU statement...",""],
["./qmb_max.htm","MAX()","MAX() The MAX() function returns the greater of two values. Format MAX(a, b) where a, b are the two values to be compared. The MAX() function comp...",""],
["./qmb_maximum.htm","MAXIMUM()","MAXIMUM() The MAXIMUM() function returns the greatest value in a dynamic array. Format MAXIMUM(dyn.array) where dyn.array is the dynamic array to ...",""],
["./qmb_min.htm","MIN()","MIN() The MIN() function returns the lesser of two values. Format MIN(a, b) where a, b are the two values to be compared. The MIN() function compa...",""],
["./qmb_minimum.htm","MINIMUM()","MINIMUM() The MINIMUM() function returns the lowest value in a dynamic array. Format MINIMUM(dyn.array) where dyn.array is the dynamic array to be...",""],
["./qmb_mod.htm","MOD()","MOD(), MODS() The MOD() function returns the modulus value of one value divided by another. The MODS() function is similar to MOD() but operates o...",""],
["./qmb_nap.htm","NAP","NAP The NAP statement causes the program in which it is executed to pause for a given number of milliseconds. Format NAP time where time is the nu...",""],
["./qmb_neg.htm","NEG()","NEG(), NEGS() The NEG() function returns the arithmetic inverse of a value. The NEGS() function is similar to NEG() but operates on successive ele...",""],
["./qmb_nes.htm","NES()","NES() The NES() function processes two dynamic arrays, returning a similarly structured result array indicating whether corresponding elements are...",""],
["./qmb_nobuf.htm","NOBUF","NOBUF The NOBUF statement turns off buffering for a record opened using OPENSEQ . Format NOBUF file.var {THEN statement(s)} {ELSE statement(s)} wh...",""],
["./qmb_not.htm","NOT()","NOT(), NOTS() The NOT() function returns the logical inverse of its argument. The NOTS() function is similar to NOT() but operates on successive e...",""],
["./qmb_null.htm","NULL","NULL The NULL statement performs no action. Format NULL The NULL statement is useful to satisfy the requirements of QMBasic syntax where no specif...",""],
["./qmb_num.htm","NUM()","NUM(), NUMS() The NUM() function tests whether a string can be converted to a number. The NUMS() function is similar to NUM() but operates on succ...",""],
["./qmb_object.htm","OBJECT()","OBJECT() The OBJECT() function instantiates an object for object oriented programming . Format OBJECT(cat.name, {args...}) where cat.name is the n...",""],
["./qmb_objinfo.htm","OBJINFO()","OBJINFO() The OBJINFO() function returns information about an object variable. Format OBJINFO(var, key) where var is the name of the object variab...",""],
["./qmb_oconv.htm","OCONV()","OCONV(), OCONVS() The OCONV() function performs output conversion. Data is converted from its internal representation to the external form. This f...",""],
["./qmb_on_gosub.htm","ON GOSUB","ON GOSUB The ON GOSUB statement enters one of a list of internal subroutines depending on the value of an expression. Format ON expr GOSUB label1{...",""],
["./qmb_on_goto.htm","ON GOTO","ON GOTO The ON GOTO statement jumps to one of a list of labels depending on the value of an expression. Format ON expr GOTO label1{:}, label2{:}, ...",""],
["./qmb_open.htm","OPEN","OPEN The OPEN statement opens a directory file or dynamic file, associating it with a file variable. Format OPEN {dict.expr,} filename.expr {READO...",""],
["./qmb_openpath.htm","OPENPATH","OPENPATH The OPENPATH statement opens a directory file or dynamic file by pathname, associating it with a file variable. Format OPENPATH pathname ...",""],
["./qmb_openseq.htm","OPENSEQ","OPENSEQ The OPENSEQ statement opens a record of a directory file for sequential access. Format OPENSEQ file.name, id {APPEND &#166; OVERWRITE &#166; READONL...",""],
["./qmb_open_socket.htm","OPEN.SOCKET()","OPEN.SOCKET() The OPEN.SOCKET() function opens a data socket for an outgoing connection. Format OPEN.SOCKET(addr, port, flags) where addr is the a...",""],
["./qmb_ors.htm","ORS()","ORS() The ORS() function performs a logical OR operation on successive elements of a dynamic array, returning a similarly structured dynamic array...",""],
["./qmb_os_error.htm","OS.ERROR()","OS.ERROR() The OS.ERROR() function returns the error number associated with the last recorded operating system level error. Format OS.ERROR() Some...",""],
["./qmb_os_execute.htm","OS.EXECUTE","OS.EXECUTE The OS.EXECUTE statement executes an operating system command. This function is not available on the PDA version of QM. Format OS.EXECU...",""],
["./qmb_outerjoin.htm","OUTERJOIN()","OUTERJOIN() The OUTERJOIN() function returns the record ids of records in a file where a field holds a specified value. Format OUTERJOIN({DICT} fi...",""],
["./qmb_page.htm","PAGE","PAGE The PAGE statement advances a print unit to a new page. Format PAGE {ON print.unit} {page.no} where print.unit evaluates to the print unit nu...",""],
["./qmb_pause.htm","PAUSE","PAUSE The PAUSE statement pauses execution until awoken by another process. This function is not available on the PDA version of QM. Format PAUSE ...",""],
["./qmb_precision.htm","PRECISION","PRECISION The PRECISION statement sets the maximum number of decimal places to appear when converting numeric values to strings. Format PRECISION ...",""],
["./qmb_print.htm","PRINT","PRINT The PRINT statement outputs data to a print unit. Format PRINT {ON print.unit} {print.list} where print.unit identifies the print unit to wh...",""],
["./qmb_printcsv.htm","PRINTCSV","PRINTCSV The PRINTCSV statement outputs CSV format data to a print unit. Format PRINTCSV {ON print.unit} var1, var2, ... where print.unit identifi...",""],
["./qmb_printer.htm","PRINTER","PRINTER ON/OFF The PRINTER ON and OFF statements determine whether output from PRINT statements to the default print unit (unit 0) is directed to ...",""],
["./qmb_printerr.htm","PRINTERR","PRINTERR, INPUTERR The PRINTERR statement displays an error message which is removed from the screen when the next input is entered. The synonym I...",""],
["./qmb_printer_close.htm","PRINTER CLOSE","PRINTER CLOSE The PRINTER CLOSE statement closes one or all print units. Format PRINTER CLOSE {ON print.unit} where print.unit identifies the prin...",""],
["./qmb_printer_display.htm","PRINTER DISPLAY","PRINTER DISPLAY The PRINTER DISPLAY statement directs output sent to a print unit to the display. Format PRINTER DISPLAY {ON print.unit} {ON ERROR...",""],
["./qmb_printer_file.htm","PRINTER FILE","PRINTER FILE The PRINTER FILE statement associates a file with a print unit. Format PRINTER FILE {ON print.unit} file.name, record.name {ON ERROR ...",""],
["./qmb_printer_name.htm","PRINTER NAME","PRINTER NAME The PRINTER NAME statement associates a named printer device with a print unit. Format PRINTER NAME {ON print.unit} printer.name {ON ...",""],
["./qmb_printer_reset.htm","PRINTER RESET","PRINTER RESET The PRINTER RESET statement resets the default print unit and display output. Format PRINTER RESET The PRINTER RESET statement perfo...",""],
["./qmb_printer_setting.htm","PRINTER SETTING","PRINTER SETTING The PRINTER SETTING statement sets a control parameter for a print unit. This statement is obsolete. The SETPU statement should be...",""],
["./qmb_printer_setting_fun.htm","PRINTER.SETTING()","PRINTER.SETTING() The PRINTER.SETTING() function sets or retrieves a control parameter for a print unit. This function is obsolete. The SETPU stat...",""],
["./qmb_private.htm","PRIVATE","PRIVATE The PRIVATE statement defines private variables in a local subroutine or in a class module. Format PRIVATE var, mat(rows, cols) where var ...",""],
["./qmb_procread.htm","PROCREAD","PROCREAD The PROCREAD statement reads data from the PROC primary input buffer. Format PROCREAD var {THEN statement(s)} {ELSE statement(s)} where v...",""],
["./qmb_procwrite.htm","PROCWRITE","PROCWRITE The PROCWRITE statement writes data to the PROC primary input buffer. Format PROCWRITE expr where expr is the data to be written. The da...",""],
["./qmb_program.htm","PROGRAM","PROGRAM The PROGRAM statement introduces a program. Format PROGRAM name where name is the name of the program. QMBasic programs should commence wi...",""],
["./qmb_prompt.htm","PROMPT","PROMPT The PROMPT statement sets the character to be used as the prompt in INPUT statements. Format PROMPT expr where expr evaluates to the charac...",""],
["./qmb_public.htm","PUBLIC","PUBLIC The PUBLIC statement defines public property variables, subroutines and functions in a class module. Format PUBLIC var, mat(rows, cols), .....",""],
["./qmb_pwr.htm","PWR()","PWR() The PWR() function returns the value of a number raised to a given power. Format PWR(expr, pwr.expr) where expr evaluates to a number or a n...",""],
["./qmb_quote.htm","QUOTE()","QUOTE(), DQUOTE() The QUOTE() function returns a copy of its argument string enclosed in double quotes. The DQUOTE() synonym is identical. Format ...",""],
["./qmb_raise.htm","RAISE()","RAISE() The RAISE() function converts mark characters in a string to the next higher level mark. Format RAISE(string) where string evaluates to th...",""],
["./qmb_randomize.htm","RANDOMIZE","RANDOMIZE The RANDOMIZE statement initialises the random number generator. Format RANDOMIZE expr where expr evaluates to a number. If omitted or a...",""],
["./qmb_rdiv.htm","RDIV()","RDIV() The RDIV() function returns the rounded integer result of dividing two values Format RDIV(dividend, divisor) where dividend evaluates to th...",""],
["./qmb_read.htm","READ","READ The READ statement reads a record from a previously opened file. Format READ var FROM file.var, record.id {ON ERROR statement(s)} {THEN state...",""],
["./qmb_readblk.htm","READBLK","READBLK The READBLK statement reads a given number of bytes from the current file position in a record previously opened using OPENSEQ . Format RE...",""],
["./qmb_readcsv.htm","READCSV","READCSV The READCSV statement reads a CSV format line of text from a directory file record previously opened for sequential access and parses it i...",""],
["./qmb_readl.htm","READL","READL The READL statement reads a record from a previously opened file, setting a read lock. Format READL var FROM file.var, record.id {ON ERROR s...",""],
["./qmb_readlist.htm","READLIST","READLIST The READLIST statement reads a select list into a dynamic array. Format READLIST var {FROM list.no} {THEN statement(s)} {ELSE statement(s...",""],
["./qmb_readnext.htm","READNEXT","READNEXT The READNEXT statement returns the next item from an active select list. Format READNEXT var {, val.pos {, subval.pos}} {FROM list.no} {O...",""],
["./qmb_readseq.htm","READSEQ","READSEQ The READSEQ statement reads the next field from a directory file record previously opened for sequential access. Format READSEQ var FROM f...",""],
["./qmb_readu.htm","READU","READU The READU statement reads a record from a previously opened file, setting an update lock. Format READU var FROM file.var, record.id {ON ERRO...",""],
["./qmb_readv.htm","READV","READV The READV statement reads a specific field from a record of a previously opened file. Format READV var FROM file.var, record.id, field.expr ...",""],
["./qmb_readvl.htm","READVL","READVL, READVU The READVL statement reads a specific field from a record of a previously opened file, setting a read lock. The READVU statement is...",""],
["./qmb_read_socket.htm","READ.SOCKET()","READ.SOCKET() The READ.SOCKET() function reads data from a socket opened with ACCEPT.SOCKET.CONNECTION() or OPEN.SOCKET() . Format READ.SOCKET(skt...",""],
["./qmb_recordlocked.htm","RECORDLOCKED()","RECORDLOCKED() The RECORDLOCKED() function indicates whether a given record is locked. Format RECORDLOCKED(file.var, record.id) where file.var is ...",""],
["./qmb_recordlockl.htm","RECORDLOCKL","RECORDLOCKL, RECORDLOCKU The RECORDLOCKL statement sets a read lock on a record. The RECORDLOCKU statement is similar but sets an update lock. For...",""],
["./qmb_release.htm","RELEASE","RELEASE The RELEASE statement releases read, update or file locks. Format RELEASE {file.var{, record.id}} {ON ERROR statement(s)} where file.var i...",""],
["./qmb_rem.htm","REM()","REM() The REM() function returns the remainder when one value is divided by another. Format REM(dividend, divisor) where dividend evaluates to a n...",""],
["./qmb_remark.htm","REMARK","REMARK, REM The REMARK statement, which may be abbreviated to REM, enters comment text into a program. Format REMARK text where text is arbitrary ...",""],
["./qmb_remove.htm","REMOVE","REMOVE, REMOVE() The REMOVE statement and REMOVE() function extract characters from a dynamic array up to the next mark character. Format REMOVE s...",""],
["./qmb_replace.htm","REPLACE()","REPLACE() The REPLACE() function replaces a field, value or subvalue of a dynamic array, returning the result. Format REPLACE(dyn.array, field {, ...",""],
["./qmb_restore_screen.htm","RESTORE.SCREEN","RESTORE.SCREEN The RESTORE.SCREEN statement restores a rectangular portion of the display screen image previously saved using SAVE.SCREEN() . This...",""],
["./qmb_return.htm","RETURN","RETURN The RETURN statement returns from an internal subroutine entered by GOSUB or an external subroutine entered by CALL. Format RETURN {TO labe...",""],
["./qmb_reuse.htm","REUSE()","REUSE() The REUSE() function determines how arithmetic operators applied to numeric arrays handle unequal numbers of fields, values or subvalues. ...",""],
["./qmb_rnd.htm","RND()","RND() The RND() function returns a random number. Format RND(expr) where expr evaluates to an integer or a numeric array. The RND() function retur...",""],
["./qmb_savelist.htm","SAVELIST","SAVELIST The SAVELIST statement saves an active select list to the $SAVEDLISTS file. Format SAVELIST name {FROM list.no} {THEN statement(s)} {ELSE...",""],
["./qmb_save_screen.htm","SAVE.SCREEN()","SAVE.SCREEN() The SAVE.SCREEN() function saves a rectangular portion of the display screen image. This statement can only be used with QMConsole a...",""],
["./qmb_seek.htm","SEEK","SEEK The SEEK statement sets the current read / write position in a directory file record previously opened for sequential access. Format SEEK fil...",""],
["./qmb_select.htm","SELECT","SELECT, SELECTN, SELECTV The SELECT statement creates a select list containing all record keys from a file. Format SELECT var {TO list.no} {ON ERR...",""],
["./qmb_selecte.htm","SELECTE","SELECTE The SELECTE statement transfers select list 0 to a select list variable. Format SELECTE TO list.var where list.var is the select list vari...",""],
["./qmb_selectindex.htm","SELECTINDEX","SELECTINDEX() The SELECTINDEX statement creates a select list from an alternate key index entry. Format SELECTINDEX index.name {, value} FROM file...",""],
["./qmb_selectinfo.htm","SELECTINFO()","SELECTINFO() The SELECTINFO() function returns information about a select list. Format SELECTINFO(list.no, key) where list.no evaluates to the num...",""],
["./qmb_selectleft.htm","SELECTLEFT and SELECTRIGHT","SELECTLEFT, SELECTRIGHT The SELECTLEFT and SELECTRIGHT statements create a select list from the entry in an alternate key index to the left or rig...",""],
["./qmb_sentence.htm","SENTENCE()","SENTENCE() The SENTENCE() function returns command line that started the current program. Format SENTENCE() The SENTENCE() function is an alternat...",""],
["./qmb_seq.htm","SEQ()","SEQ() The SEQ() function returns the ASCII character set position value of a character. Format SEQ(char) where char evaluates to the character to ...",""],
["./qmb_server_addr.htm","SERVER.ADDR()","SERVER.ADDR() The SERVER.ADDR() function returns the IP address for a given server name. Format SERVER.ADDR(server.name) where server.name is the ...",""],
["./qmb_setleft.htm","SETLEFT and SETRIGHT","SETLEFT, SETRIGHT The SETLEFT and SETRIGHT statements set the scanning position of an alternate key index at the extreme left or right of the data...",""],
["./qmb_setnls.htm","SETNLS","SETNLS The SETNLS statement sets the value of a national language support parameter. Format SETNLS key, value where key identifies the parameter t...",""],
["./qmb_setpu.htm","SETPU","SETPU The SETPU statement sets the characteristics of a print unit. Format SETPU key, unit, value where key identifies the parameter to retrieved....",""],
["./qmb_setrem.htm","SETREM","SETREM The SETREM statement sets the remove pointer of a string. Format SETREM offset ON string where offset is the character offset of the remove...",""],
["./qmb_set_arg.htm","SET.ARG","SET.ARG The SET.ARG statement updates a subroutine argument value based on its position in the argument list. It is intended for use with subrouti...",""],
["./qmb_set_exit_status.htm","SET.EXIT.STATUS","SET.EXIT.STATUS The SET.EXIT.STATUS statement sets the final exit status returned by QM to the operating system. This operation has no effect on t...",""],
["./qmb_set_port_params.htm","SET.PORT.PARAMS()","SET.PORT.PARAMS() The SET.PORT.PARAMS() function sets the communications parameters for a serial port. This function is not available on the PDA v...",""],
["./qmb_set_socket_mode.htm","SET.SOCKET.MODE()","SET.SOCKET.MODE() The SET.SOCKET.MODE() function sets parameters for an open socket. Format SET.SOCKET.MODE(skt, key, value) where skt is the sock...",""],
["./qmb_shift.htm","SHIFT()","SHIFT() The SHIFT() function performs a logical bit-shift operation on an integer value. Format SHIFT(value, shift.len) where value evaluates to t...",""],
["./qmb_sin.htm","SIN()","SIN() The SIN() function returns the sine of a value. Format SIN(expr) where expr evaluates to a number or a numeric array. The SIN() function ret...",""],
["./qmb_sleep.htm","SLEEP","SLEEP, RQM The SLEEP statement causes the program in which it is executed to pause for a given number of seconds or until a specific time. The syn...",""],
["./qmb_socket_info.htm","SOCKET.INFO()","SOCKET.INFO() The SOCKET.INFO() function returns information about an open socket. Format SOCKET.INFO(skt, key) where skt is the socket variable f...",""],
["./qmb_soundex.htm","SOUNDEX()","SOUNDEX(), SOUNDEXS() The SOUNDEX() function returns a four character string determined by the phonetic content of a string. The SOUNDEXS() functi...",""],
["./qmb_space.htm","SPACE()","SPACE(), SPACES() The SPACE() function returns a string consisting of a given number of spaces. The SPACES() function is similar to SPACE() but op...",""],
["./qmb_splice.htm","SPLICE()","SPLICE() The SPLICE() function concatenates corresponding elements of a dynamic array, inserting a string between each pair of items. Format SPLIC...",""],
["./qmb_sqrt.htm","SQRT()","SQRT() The SQRT() function returns the square root of a value. Format SQRT(expr) where expr evaluates to a number or a numeric array. The SQRT() f...",""],
["./qmb_squote.htm","SQUOTE()","SQUOTE() The SQUOTE() function returns a copy of its argument string enclosed in single quotes. Format SQUOTE(expr) where expr evaluates to the so...",""],
["./qmb_sselect.htm","SSELECT","SSELECT The SSELECT statement creates a select list containing all record keys from a file sorted into left justified ascending order. Format SSEL...",""],
["./qmb_status.htm","STATUS()","STATUS() The STATUS() function returns information following execution of certain other statements. In many cases, this information gives details ...",""],
["./qmb_status_statement.htm","STATUS","STATUS The STATUS statement returns a dynamic array containing a variety of information about an open file. Not all fields are returned on the PDA...",""],
["./qmb_stop.htm","STOP","STOP, STOPE, STOPM The STOP statement terminates the current program. STOPE and STOPM provide compatibility with other multivalue database product...",""],
["./qmb_str.htm","STR()","STR(), STRS() The STR() function returns a string made up of a given number of repeated occurrences of another string. The STRS() function is simi...",""],
["./qmb_subr.htm","SUBR()","SUBR() The SUBR() function calls a subroutine as a function in an expression. It is normally only used in dictionary I-type items. Format SUBR(nam...",""],
["./qmb_subroutine.htm","SUBROUTINE","SUBROUTINE The SUBROUTINE statement introduces a subroutine. The abbreviation SUB may be used. Format SUBROUTINE name{(arg1 {, arg2...}) {VAR.ARGS...",""],
["./qmb_substitute.htm","SUBSTITUTE()","SUBSTITUTE() The SUBSTITUTE() function performs substring replacement on successive elements of a dynamic array, returning a similarly structured ...",""],
["./qmb_substrings.htm","SUBSTRINGS()","SUBSTRINGS() The SUBSTRINGS() function performs substring extraction on successive elements of a dynamic array, returning a similarly structured d...",""],
["./qmb_sum.htm","SUM()","SUM() The SUM() function eliminates the lowest level of a dynamic array by adding the elements to form an item of the next highest level. Format S...",""],
["./qmb_summation.htm","SUMMATION()","SUMMATION() The SUMMATION() function returns the total value of all elements of a numeric array. Format SUMMATION(expr) where expr evaluates to a ...",""],
["./qmb_swapcase.htm","SWAPCASE(0","SWAPCASE() The SWAPCASE() function inverts the case of all alphabetic characters in a string. Format SWAPCASE(string) where string evaluates to th...",""],
["./qmb_system.htm","SYSTEM()","SYSTEM() The SYSTEM() function returns information regarding the status of various aspects of the system. On the PDA version of QM, key values tha...",""],
["./qmb_tan.htm","TAN()","TAN() The TAN() function returns the tangent of a value. Format TAN(expr) where expr evaluates to a number or a numeric array. The TAN() function ...",""],
["./qmb_tclread.htm","TCLREAD","TCLREAD The TCLREAD statement retrieves the sentence that started the current program. Format TCLREAD var where var is the variable to receive the...",""],
["./qmb_terminfo.htm","TERMINFO()","TERMINFO() The TERMINFO() function returns information from the terminfo database. Format TERMINFO() TERMINFO(cap.name) where cap.name evaluates t...",""],
["./qmb_time.htm","TIME()","TIME() The TIME() function returns the current time as the number of seconds since midnight. Format TIME() The TIME() function returns the number ...",""],
["./qmb_timedate.htm","TIMEDATE()","TIMEDATE() The TIMEDATE() function returns the current time and date as a string. Format TIMEDATE() The TIMEDATE() function returns the current ti...",""],
["./qmb_timeout.htm","TIMEOUT","TIMEOUT The TIMEOUT statement sets a timeout for READBLK and READSEQ . Format TIMEOUT file.var, interval where file.var is the file variable assoc...",""],
["./qmb_total.htm","TOTAL()","TOTAL() The TOTAL() function accumulates totals for use with the CALC query processor keyword. It is only available in dictionary I-type items. Fo...",""],
["./qmb_trans.htm","TRANS(), RTRANS(), XLATE()","TRANS(), XLATE(), RTRANS() The TRANS() function returns a field or the entire record from a named data file. It is normally only used in dictionar...",""],
["./qmb_transaction.htm","TRANSACTION ABORT, TRANSACTION COMMIT, TRANSACTION START","TRANSACTION START/COMMIT/ABORT The TRANSACTION START/COMMIT/ABORT statements provide an alternative to use of the BEGIN TRANSACTION , COMMIT , ROL...",""],
["./qmb_trim.htm","TRIM()","TRIM() The TRIM() function removes excess characters from a string. Format TRIM(string) TRIM(string, character{, mode}) where string evaluates to ...",""],
["./qmb_trimb.htm","TRIMB()","TRIMB(), TRIMBS() The TRIMB() function removes excess spaces from the back of a string. The TRIMBS() function is similar to TRIMB() but operates o...",""],
["./qmb_trimf.htm","TRIMF()","TRIMF(), TRIMFS() The TRIMF() function removes excess spaces from the front of a string. The TRIMFS() function is similar to TRIMF() but operates ...",""],
["./qmb_trims.htm","TRIMS()","TRIMS() The TRIMS() function removes excess spaces from strings in a dynamic array, operating on each element in turn and and returning an equival...",""],
["./qmb_ttyget.htm","TTYGET()","TTYGET() The TTYGET() function returns a dynamic array containing the current terminal settings. Format TTYGET() The TTYGET() function allows an a...",""],
["./qmb_ttyset.htm","TTYSET","TTYSET The TTYSET statement sets the terminal modes. Format TTYSET var where var is a dynamic array of terminal mode settings. The TTYSET statemen...",""],
["./qmb_unassigned.htm","UNASSIGNED()","UNASSIGNED() The UNASSIGNED() function tests whether a variable is unassigned. Format UNASSIGNED(var) where var is the variable to be tested. All ...",""],
["./qmb_unlock.htm","UNLOCK","UNLOCK The UNLOCK statement releases one of 64 system wide task locks. Format UNLOCK lock.num {THEN statement(s)} {ELSE statement(s)} where lock.n...",""],
["./qmb_until.htm","UNTIL","UNTIL The UNTIL statement is used in conjunction with the FOR / NEXT or LOOP / REPEAT constructs to determine whether execution of the loop should...",""],
["./qmb_upcase.htm","UPCASE()","UPCASE() The UPCASE() function returns a string with all letters converted to upper case. Format UPCASE(string) where string evaluates to the stri...",""],
["./qmb_vslice.htm","VSLICE()","VSLICE() The VSLICE() function returns a string formed by extracting a given value position from a dynamic array. Format VSLICE(string, value) whe...",""],
["./qmb_wake.htm","WAKE","WAKE The WAKE statement awakens another process that has executed a PAUSE . This function is not available on the PDA version of QM. Format WAKE u...",""],
["./qmb_weofseq.htm","WEOFSEQ","WEOFSEQ The WEOFSEQ statement truncates a record open for sequential access at the current position. Format WEOFSEQ file.var {ON ERROR statement(s...",""],
["./qmb_while.htm","WHILE","WHILE The WHILE statement is used in conjunction with the FOR / NEXT or LOOP / REPEAT constructs to determine whether execution of the loop should...",""],
["./qmb_write.htm","WRITE","WRITE, WRITEU The WRITE statement writes a record to a previously opened file. The WRITEU statement is identical but preserves any lock on the rec...",""],
["./qmb_writeblk.htm","WRITEBLK","WRITEBLK The WRITEBLK statement writes data at the current file position in a record previously opened using OPENSEQ. Format WRITEBLK var TO file....",""],
["./qmb_writecsv.htm","WRITECSV","WRITECSV The WRITECSV statement writes data at the current file position in a record previously opened using OPENSEQ. The data to be written is as...",""],
["./qmb_writeseq.htm","WRITESEQ","WRITESEQ, WRITESEQF The WRITESEQ statement writes a string array to a directory file record previously opened for sequential access. WRITESEQF is ...",""],
["./qmb_writev.htm","WRITEV","WRITEV, WRITEVU The WRITEV statement writes a specific field to a record of a previously opened file. The WRITEVU statement is identical but prese...",""],
["./qmb_write_socket.htm","WRITE.SOCKET()","WRITE.SOCKET() The WRITE.SOCKET() function writes data to a socket opened with ACCEPT.SOCKET.CONNECTION() or OPEN.SOCKET() . Format WRITE.SOCKET(s...",""],
["./qmb_xtd.htm","XTD()","XTD() The XTD() function converts a string of hexadecimal characters to a number. Format XTD(expr) where expr evaluates to the hexadecimal string ...",""],
["./qmcall.htm","QMCall","QMCall The QMCall function calls a catalogued subroutine on the server. Format VB QMCall ByVal SubrName as String, ByVal ArgCount as Integer, Opti...",""],
["./qmchange.htm","QMChange()","QMChange() The QMChange() function replaces occurrences of one substring with another in a string. Format VB QMChange(ByVal Src as String, ByVal O...",""],
["./qmclearselect.htm","QMClearselect","QMClearSelect The QMClearSelect function clears a select list. Format VB QMClearSelect ByVal ListNo as Integer C void QMClearSelect(ByVal ListNo) ...",""],
["./qmclient.htm","QMClient API","QMClient API Historically, multi-value databases have used a character based user interface. QM includes a set of Windows OLE compatible functions...",""],
["./qmclientsecurity.htm","Security Issues of the QMClient API","Security Issues of the QMClient API In most systems, a normal terminal user is taken directly into the application on logging in and the applicati...",""],
["./qmclose.htm","QMClose","QMClose The QMClose function closes a file. Format VB QMClose ByVal FileNo as Integer C void QMClose(int FileNo) Obj Session-&#62;Close(FileNo) where ...",""],
["./qmconnect.htm","QMConnect()","QMConnect() The QMConnect() function establishes a QMClient session. Format VB QMConnect(ByVal Host as String, ByVal Port as Integer, ByVal UserNa...",""],
["./qmconnected.htm","QMConnected()","QMConnected() The QMConnected() function confirms whether a QMClient session is open. Format VB QMConnected() as Boolean C int QMConnected() Obj B...",""],
["./qmconnectlocal.htm","QMConnectLocal()","QMConnectLocal() The QMConnectLocal() function establishes a QMClient session on the local system. Format VB QMConnectLocal(ByVal Account as Strin...",""],
["./qmdcount.htm","QMDcount()","QMDcount() The QMDcount() function counts delimited items in a string. Format VB QMDcount(ByVal Src as String, ByVal Delim as String) as Long C in...",""],
["./qmdel.htm","QMDel()","QMDel() The QMDel() function deletes a field, value or subvalue from a dynamic array. Format VB QMDel(ByVal Src as String, ByVal Fno as Integer, B...",""],
["./qmdelete.htm","QMDelete()","QMDelete() The QMDelete function deletes a record from a file. Format VB QMDelete ByVal FileNo as Integer, ByVal Id as String C void QMDelete(int ...",""],
["./qmdeleteu.htm","QMDeleteu()","QMDeleteu() The QMDeleteu function deletes a record from a file, retaining the record lock. Format VB QMDeleteu ByVal FileNo as Integer, ByVal Id ...",""],
["./qmdisconnect.htm","QMDisconnect","QMDisconnect The QMDisconnect function terminates a QMClient session. Format VB QMDisconnect C void QMDisconnect(void) Obj Session-&#62;Disconnect The...",""],
["./qmdisconnectall.htm","QMDisconnectAll","QMDisconnectAll The QMDisconnectAll function terminates all QMClient sessions from a client process. Format VB QMDisconnectAll C void QMDisconnect...",""],
["./qmendcommand.htm","QMEndCommand","QMEndCommand The QMEndCommand function aborts a command executed on the server that is requesting input. Format VB QMEndCommand C void QMEndComman...",""],
["./qmerror.htm","QMError()","QMError() The QMError() function returns extended error message text. Format VB QMError() as String C char * QMError(void) VB Str = Session-&#62;error...",""],
["./qmexecute.htm","QMExecute()","QMExecute() The QMExecute() function executes a command on the server. Format VB QMExecute(ByVal Cmnd as String, ByRef Errno as Integer) as String...",""],
["./qmextract.htm","QMExtract()","QMExtract() The QMExtract() function extracts a field, value or subvalue from a dynamic array. Format VB QMExtract(ByVal Src as String, ByVal Fno ...",""],
["./qmfield.htm","QMField()","QMField() The QMField() function extracts one or more components of a delimited string. Format VB QMField(ByVal Src as String, ByVal Delimiter as ...",""],
["./qmfiles.htm","The QM File System","The QM File System File Types The files used by QM are of two types; directory files and dynamic files . Directory files do not give high performa...",""],
["./qmfix.htm","The qmfix Utility","The qmfix Utility The QM file system is designed to be robust, however, there are situations when power failures, hardware failures or abnormal te...",""],
["./qmfree.htm","QMFree()","QMFree() The QMFree() function releases memory returned by other functions. It is only used with the C API library. Format void QMFree(void * addr...",""],
["./qmgetsession.htm","QMGetSession()","QMGetSession() The QMGetSession() function returns the internal session number associated with the currently selected QMClient session. Format VB ...",""],
["./qmidx.htm","The qmidx Utility","The qmidx Utility The QM file system supports alternate key indices for retrieval of data based on the content of a non-key field. Normally, these...",""],
["./qmins.htm","QMIns()","QMIns() The QMIns() function inserts a field, value or subvalue in a dynamic array. Format VB QMIns(ByVal Src as String, ByVal Fno as Integer, ByV...",""],
["./qmlocate.htm","QMLocate()","QMLocate() The QMLocate() function searches a dynamic array for a field, value or subvalue matching a given string. Format VB QMLocate(ByVal Item ...",""],
["./qmlogto.htm","QMLogto()","QMLogto() The QMLogto() function moves to an alternative account. Format VB QMLogto(ByVal Account as String) as Boolean C int QMLogto(char * Accou...",""],
["./qmmarkmapping.htm","QMMarkMapping","QMMarkMapping The QMMarkMapping function enables or disables mark mapping for a directory file. Format VB QMMarkMapping ByVal FileNo as Integer, B...",""],
["./qmmatch.htm","QMMatch()","QMMatch() The QMMatch() function matches a string against a pattern template. Format VB QMMatch(ByVal Src as String, ByVal Pattern as String) as B...",""],
["./qmmatchfield.htm","QMMatchfield()","QMMatchfield() The QMMatchfield() function matches a character string against a pattern template and extracts the part corresponding to a specifie...",""],
["./qmnet.htm","QMNet Network File Access","QMNet QMNet uses the QMClient interface to provide an extension to the QM file system allowing network access to files on another QM system. Unlik...",""],
["./qmopen.htm","QMOpen()","QMOpen() The QMOpen() function opens a file. Format VB QMOpen(ByVal FileName as String) as Integer C int QMOpen(char * FileName) Obj FileNo = Sess...",""],
["./qmread.htm","QMRead()","QMRead() The QMRead() function reads a record without locking. Format VB QMRead(ByVal FileNo as Integer, ByVal Id as String, ByRef Errno as Intege...",""],
["./qmreadl.htm","QMReadl()","QMReadl() The QMReadl() function reads a record with a shareable read lock. Format VB QMReadl(ByVal FileNo as Integer, ByVal Id as String, ByVal W...",""],
["./qmreadlist.htm","QMReadList()","QMReadList() The QMReadList() function reads a select list into a dynamic array in the client application Format VB QMReadList(ByVal ListNo as Int...",""],
["./qmreadnext.htm","QMReadNext()","QMReadNext() The QMReadNext() function retrieves the next entry from a select list Format VB QMReadNext(ByVal ListNo as Integer, ByRef Errno as In...",""],
["./qmreadu.htm","QMReadu()","QMReadu() The QMReadu() function reads a record with an exclusive update lock. Format VB QMReadu(ByVal FileNo as Integer, ByVal Id as String, ByVa...",""],
["./qmrecordlock.htm","QMRecordlock","QMRecordlock The QMRecordlock function locks a record. Format VB QMRecordlock ByVal FileNo as Integer, ByVal Id as String, ByVal Update as Integer...",""],
["./qmrelease.htm","QMRelease","QMRelease The QMRelease function releases a record lock. Format VB QMRelease ByVal FileNo as Integer, ByVal Id as String C void QMRelease(int File...",""],
["./qmreplace.htm","QMReplace()","QMReplace() The QMReplace() function replaces the content of a field, value or subvalue in a dynamic array. Format VB QMReplace(ByVal Src as Strin...",""],
["./qmrespond.htm","QMRespond()","QMRespond() The QMRespond() function responds to a request for input from a command executed on the server. Format VB QMRespond(ByVal Response as ...",""],
["./qmselect.htm","QMSelect","QMSelect The QMSelect function generates a select list containing the ids of all records in a file. Format VB QMSelect ByVal FileNo as Integer, By...",""],
["./qmselectindex.htm","QMSelectIndex","QMSelectIndex The QMSelectIndex function generates a select list from an alternate key index. Format VB QMSelectIndex ByVal FileNo as Integer, ByV...",""],
["./qmselectleft.htm","QMSelectLeft and QMSelectRight","QMSelectLeft(), QMSelectRight() The QMSelectLeft() and QMSelectRight() functions traverse an alternate key index, creating a select list from the ...",""],
["./qmsetleft.htm","QMSetLeft and QMSetRight","QMSetLeft(), QMSetRight() The QMSetLeft() and QMSetRight() functions set the scanning position of an alternate key index at the extreme left or ri...",""],
["./qmsetsession.htm","QMSetSession()","QMSetSession() The QMSetSession() function selects an active QMClient session to be referenced by subsequent function calls. Format VB QMSetSessio...",""],
["./qmstatus.htm","QMStatus()","QMStatus() The QMStatus() function returns the value of the QMBasic STATUS() function for the last server function executed. Format VB QMStatus() ...",""],
["./qmtic.htm","The qmtic Utility","The qmtic Utility The qmtic tool can be used to compile new terminal definitions or to decompile existing ones. Although it is possible to store s...",""],
["./qmwrite.htm","QMWrite","QMWrite The QMWrite function writes a record. Format VB QMWrite ByVal FileNo as Integer, ByVal Id as String, ByVal Rec as String C void QMWrite(in...",""],
["./qmwriteu.htm","QMWriteu","QMWriteu The QMWriteu function writes a record, retaining the lock. Format VB QMWriteu ByVal FileNo as Integer, ByVal Id as String, ByVal Rec as S...",""],
["./qm_commands.htm","QM Commands","QM Commands * Comment $ECHO Paragraph tracing ! Synonym for SH ABORT Abort processing and return to command prompt ACCOUNT.RESTORE Restore a Pick ...",""],
["./qm_command_options.htm","QM Command Options","QM Command Options The QM executable stored in the bin subdirectory of the QMSYS account has a number of command line options. The command option ...",""],
["./qselect.htm","QSELECT","QSELECT The QSELECT command constructs a select list from the content of selected records. Format QSELECT {DICT} file.name {id... &#166; * &#166; FROM list}...",""],
["./queryintro.htm","Query Processing","Query Processing QM verbs that select records from files or produce reports are handled by the query processor. All query processor verbs follow a...",""],
["./querykeywords.htm","Query processor keywords","Query Processor Keywords Field qualifiers % Synonym for PERCENTAGE AS Define synonym for field and qualifiers ASSOC Include field in association A...",""],
["./quit.htm","QUIT","QUIT, OFF The QUIT command terminates the current QM session. The synonym OFF can be used. Format QUIT The QUIT command terminates the QM session....",""],
["./q_select.htm","SELECT and SSELECT","SELECT and SSELECT The SELECT and SSELECT verbs build a select list containing the keys of records meeting specified criteria. SSELECT is equivale...",""],
["./recordsandmarks.htm","Database Records and Mark Characters","Database Records and Mark Characters A database record may have any number of fields (table columns). The entire record and the constituent fields...",""],
["./reformat.htm","REFORMAT","REFORMAT The REFORMAT verb constructs a new file from data in the source file. It is of use, for example, when constructing intermediate files in ...",""],
["./release.htm","RELEASE","RELEASE The RELEASE command releases record or file locks.. Format RELEASE filename id... RELEASE FILELOCK filename In the first form, RELEASE rel...",""],
["./repeating.htm","REPEATING","REPEATING The REPEATING keyword causes the query processor to repeat single valued data against further values in other fields. Format REPEATING I...",""],
["./report_src.htm","REPORT.SRC","REPORT.SRC The REPORT.SRC command turns on or off display of the @SYSTEM.RETURN.CODE variable on return to the command prompt. It is particularly ...",""],
["./report_style.htm","REPORT.STYLE","REPORT.STYLE The REPORT.STYLE command sets the default query processor report style. Format REPORT.STYLE name To set the default report style REPO...",""],
["./require_index.htm","REQUIRE.INDEX","REQUIRE.INDEX The REQUIRE.INDEX keyword causes the query processor to terminate the query unless it can make use of an alternate key index. Format...",""],
["./require_select.htm","REQUIRE.SELECT","REQUIRE.SELECT The REQUIRE.SELECT keyword indicates that the query should only proceed if there is an active select list. Format REQUIRE.SELECT Th...",""],
["./reset_master_key.htm","RESET.MASTER.KEY","RESET.MASTER.KEY The RESET.MASTER.KEY command resets the encryption master key. This command can only be executed by users with administrator righ...",""],
["./restore_accounts.htm","RESTORE.ACCOUNTS","RESTORE.ACCOUNTS The RESTORE.ACCOUNTS command restores all accounts from a Pick style FILE.SAVE tape. Format RESTORE.ACCOUNTS target {options} whe...",""],
["./revoke_key.htm","REVOKE.KEY","REVOKE.KEY The REVOKE.KEY command removes access to a specific data encryption key. This command can only be executed by users with administrator ...",""],
["./run.htm","RUN","RUN The RUN command initiates execution of a compiled QMBasic program. It can also be used to execute VOC style items that are stored in alternati...",""],
["./said.htm","SAID","SAID, SPOKEN, ~ The SAID selection clause operator compares a field or evaluated expression against another field, evaluated expression or literal...",""],
["./sample.htm","SAMPLE","SAMPLE, FIRST The SAMPLE selection clause keyword causes only a limited number of records to be selected or displayed. The synonym FIRST can be us...",""],
["./sampled.htm","SAMPLED","SAMPLED The SAMPLED selection clause keyword causes only a proportion of records to be selected or displayed. Format SAMPLED {n} where n is the sa...",""],
["./save_list.htm","SAVE.LIST","SAVE.LIST The SAVE.LIST command is used to save an active select list for future use. Format SAVE.LIST list.name {FROM list.no} where list.name is...",""],
["./save_stack.htm","SAVE.STACK","SAVE.STACK The SAVE.STACK command saves the current command stack . Format SAVE.STACK {stack.name} where stack.name is the name to be given to the...",""],
["./saving.htm","SAVING { UNIQUE}","SAVING { UNIQUE } {MULTI.VALUE} The SAVING clause can be used in a SELECT or SSELECT command to save the content of a field in place of the record...",""],
["./scrb.htm","SCRB","SCRB The SCRB command runs the screen builder to create or modify a screen definition for use by the QMBasic !SCREEN() subroutine. Format SCRB {sc...",""],
["./scroll.htm","SCROLL","SCROLL The SCROLL keyword used in a report directed to the display enables scrolling back through report pages. Format SCROLL { pages } where page...",""],
["./search.htm","SEARCH","SEARCH The SEARCH verb is similar to SELECT except that it also prompts for entry of one or more text strings. Records that meet any other selecti...",""],
["./security.htm","SECURITY","SECURITY The SECURITY command enables, disables or reports the state of QM&#39;s internal security system. User management is not applicable to the PD...",""],
["./securitysubroutines.htm","Security subroutines","Security Subroutines An R-type or V-type VOC entry can optionally include the name of a catalogued security subroutine in field 4 (R-type) or fiel...",""],
["./sed.htm","SED","SED - The Screen Based Editor The SED command is a screen based editor, particularly useful for editing QMBasic source programs where many lines (...",""],
["./sed_changingtext.htm","SED - Changing text","SED - Changing Text Replace (Ctrl-X R) The replace function prompts for a search string and a replacement string. All occurrences of the search st...",""],
["./sed_commands.htm","SED - Commands","SED - Commands The command function is used to alter various long term states of the editor and to perform other actions. After entering the comma...",""],
["./sed_copyingdeletingandrestoringdata.htm","SED - Copying, deleting and restoring data","SED - Copying, Deleting and Restoring Data Delete char (Ctrl-D) The character at the current cursor position is deleted unless the cursor is posit...",""],
["./sed_cursormovementfunctions.htm","SED - Cursor movement functions","SED - Cursor Movement Functions Start line (Ctrl-A) Moves the cursor to the start of the current line (column 1). End line (Ctrl-E) Moves the curs...",""],
["./sed_datainsertion.htm","SED - Data insertion","SED - Data Insertion Data is inserted at the current cursor position. If overlay mode is set the new data overwrites any existing data at this pos...",""],
["./sed_dynamickeybindings.htm","SED - Dynamic key bindings","SED - Dynamic Key Bindings The key bindings used in the function descriptions in this manual are the defaults used by SED, known as the fundamenta...",""],
["./sed_extensionprogramming.htm","SED - Extension Programming","SED - Extension Programming The extension programming feature allows users to add new functions to the editor. These may range from simple inserti...",""],
["./sed_extensionsargpassing.htm","SED Extensions - Argument Passing","SED - Argument Passing Any user written PROC or FUNC may take arguments. The actual number the compiler expects to pass is determined by the first...",""],
["./sed_extensionsexample.htm","SED Extensions - An example of a complex extension","SED - An Example of a Complex Extension The following extension implements a ?walk? function. This function allows you to define a rectangular blo...",""],
["./sed_extensionslocalprocs.htm","SED Extensions - Local procedures and functions","SED - Local Procedures and Functions A single extension source record may contain local procedures and functions that are only accessible to the o...",""],
["./sed_extensionsstdvarfunc.htm","SED Extensions - Standard variables and functions","SED - Standard Variables and Functions Variables are type variant in the same way as for QMBasic programs and they follow the same rules. In most ...",""],
["./sed_extensionsvarconstfunc.htm","SED Extensions - Variables, constants and functions","SED - Variables, Constants and Functions All extension program source text is case insensitive except for literal strings. Local Variables These a...",""],
["./sed_filehandling.htm","SED - File handling","SED - File Handling Save record (Ctrl-X S or Ctrl-X Ctrl-S) The current record is saved, overwriting the previous version (if any). Write record (...",""],
["./sed_functionsthatoperateonablockofdata.htm","SED - Functions that operate of a block of data","SED - Functions That Operate On A Block Of Data The editor maintains reference to two positions within the record; the cursor position and the mar...",""],
["./sed_macros.htm","SED - Macros","SED - Macros The editor allows multiple command sequences to be collected as a macro for subsequent re-execution. The functions marked with an ast...",""],
["./sed_miscellaneousfunctions.htm","SED - Miscellaneous functions","SED - Miscellaneous Functions Cancel (Ctrl-G) The cancel function aborts partially entered commands such as searches or repeat counts. Refresh (Ct...",""],
["./sed_multivalueddata.htm","SED - Working with multivalued data","SED - Working with Multivalued Data When in a normal data window, some edit functions normally associated with file handling actions have special ...",""],
["./sed_recordsbuffersandwindows.htm","SED - Records, buffers and windows","SED - Records, Buffers and Windows A record to be edited is held in a buffer. Buffers may also hold records being created but not yet written to d...",""],
["./sed_repeatingfunctions.htm","SED - Repeating functions","SED - Repeating Functions A function may be repeated multiple times by use of the repeat count prefix. This is performed by use of the ESCape key ...",""],
["./sed_settingupdefaultmodes.htm","SED - Setting up default modes","SED - Setting Up Default Modes On entry, SED looks for a record named &#38;SED.OPTIONS&#38; in the VOC file. This record may be used to set up default con...",""],
["./sed_sourcecontrol.htm","SED - Source control","SED - Source Control SED includes a mechanism that may be used to implement a source control system or other special processing when updated recor...",""],
["./sed_standardkeybindings.htm","SED - Standard key bindings","SED - Standard Key Bindings SED commands in the default key bindings consist of keystrokes which are Control shift + key ESCape followed by anothe...",""],
["./sed_standardkeybindingsquickreference.htm","SED - Standard key bindings quick reference","SED - Standard Key Bindings Quick Reference Simple Cursor Movements \"All the way\" movements Ctrl-P (previous) Esc-&#60; ^ ^ &#166; &#166; &#166; &#166; &#166; &#166; Ctrl-B &#60;---- ....",""],
["./select.htm","SELECT and SSELECT","SELECT and SSELECT The SELECT and SSELECT verbs build a select list containing the keys of records meeting specified criteria. SSELECT is equivale...",""],
["./selectionclause.htm","The Selection Clause","The Selection Clause A selection clause may be provided to specify criteria governing which records are processed by the command. If omitted, all ...",""],
["./selectlists.htm","Select Lists","Select Lists Select lists are lists of things to be processed, usually record keys from a file. The list may contain all record keys or only those...",""],
["./sel_restore.htm","SEL.RESTORE","SEL.RESTORE The SEL.RESTORE command restores a single file from a Pick style ACCOUNT.SAVE or FILE.SAVE tape. Format SEL.RESTORE {DICT} target.file...",""],
["./sequential_file_io.htm","Sequential File I/O","Sequential File I/O Directory files are so called because they are represented by an operating system directory. The records in these files are re...",""],
["./set.htm","SET","SET The SET command sets a value into an @-variable. Format SET variable value SET variable EVAL expression where variable is the name of the vari...",""],
["./setport.htm","SETPORT","SETPORT The SETPORT command sets communications parameters of a serial port. This command is not available on the PDA version of QM. Format SETPOR...",""],
["./setptr.htm","SETPTR","SETPTR The SETPTR command sets print unit characteristics. Format SETPTR unit {, width, depth, top.margin, bottom.margin, mode {, options }} SETPT...",""],
["./set_date.htm","SET.DATE","SET.DATE The SET.DATE command adjusts the date used for all internal processing. Format SET.DATE date where date is the new date to be used. The S...",""],
["./set_device.htm","SET.DEVICE","SET.DEVICE, T.ATT The SET.DEVICE command opens a tape or pseudo-tape for processing by QM. The synonym T.ATT may be used. Format SET.DEVICE device...",""],
["./set_encryption_key_name.htm","SET.ENCRYPTION.KEY.NAME","SET.ENCRYPTION.KEY.NAME The SET.ENCRYPTION.KEY.NAME command updates a data file to reference a new name for an encryption key. Format SET.ENCRYPTI...",""],
["./set_exit_status.htm","SET.EXIT.STATUS","SET.EXIT.STATUS The SET.EXIT.STATUS command sets the final exit status returned by QM to the operating system. This command is not available on th...",""],
["./set_file.htm","SET.FILE","SET.FILE The SET.FILE command adds a Q-pointer to the VOC to reference a remote file. Format SET.FILE {account { filename { pointer} } } where acc...",""],
["./set_queue.htm","SET.QUEUE","SET.QUEUE The SET.QUEUE command creates a relationship between a Pick style form queue number and the corresponding SETPTR print unit options. For...",""],
["./set_trigger.htm","SET.TRIGGER","SET.TRIGGER The SET.TRIGGER command sets, removes or displays the trigger function associated with a dynamic file. Format SET.TRIGGER file.name fu...",""],
["./sh.htm","SH","SH, ! The SH command executes a shell (operating system) command. This command is not available on the PDA version of QM. Format SH command !comma...",""],
["./show.htm","SHOW","SHOW The SHOW command provides an interactive means of building select lists. Format SHOW {DICT} file.name {USING {DICT} file.name} {field.name {f...",""],
["./single_value.htm","SINGLE.VALUE","SINGLE.VALUE, SINGLEVALUED The SINGLE.VALUE keyword is a field qualifier that forces the field to be processed as a single-valued item. Format fie...",""],
["./sleep.htm","SLEEP","SLEEP The SLEEP command suspends execution of further commands until a given number of seconds have elapsed or until a specified time of day. Form...",""],
["./sortclause.htm","The Sort Clause","The Sort Clause The optional sort clause determines the order in which records are inserted into the select list ( SELECT , SSELECT , SEARCH ) or ...",""],
["./spool.htm","SPOOL","SPOOL The SPOOL command sends specified records to the printer. Format SPOOL file record(s) { LINES m n } { LNUM }{ LPTR n } where file is the fil...",""],
["./sp_assign.htm","SP.ASSIGN","SP.ASSIGN The SP.ASSIGN command uses a form queue number to set the destination and other options for printer output. Format SP.ASSIGN options whe...",""],
["./sp_open.htm","SP.OPEN, SP.CLOSE","SP.OPEN, SP.CLOSE The SP.OPEN command sets the \"keep open\" flag on the default printer, merging multiple print requests into a single print job. T...",""],
["./sp_view.htm","SP.VIEW","SP.VIEW The SP.VIEW command views and, optionally, prints records from $HOLD or other files. Format SP.VIEW {file} {item} { LPTR n } where file is...",""],
["./standardsubroutines.htm","Standard Subroutines","Standard Subroutines QMBasic includes a set of standard subroutines that may be called from user programs. These all have an exclamation mark pref...",""],
["./startup.htm","Startup and Shutdown of QM","Startup and Shutdown of QM QM maintains some persistent data in shared memory that is accessed by all QM users. This includes the locking tables, ...",""],
["./status.htm","STATUS","STATUS The STATUS command displays a list of active phantom processes. This command is not available on the PDA version of QM. Format STATUS A lis...",""],
["./stop.htm","STOP","STOP The STOP command terminates the currently active paragraph. Format STOP The STOP command is intended as a means of exiting from the middle of...",""],
["./style.htm","STYLE","STYLE The STYLE keyword selects the report style to be used, overriding any style selected using the REPORT.STYLE or SETPTR commands or the QMBasi...",""],
["./sum.htm","SUM","SUM The SUM verb reports the total of the values in named fields. SUM {DICT} file.name {USING {DICT} file.name} field.name {field.qualifier} ... {...",""],
["./sxa.htm","Building a Self-Installing Application","Building a Self-Installing Application If you are developing an application to be provided as a complete user-installable package, you probably wa...",""],
["./sysadmin.htm","System Administration","System Administration System Configuration Configuration Parameters Parameter descriptions UPDATE.LICENCE Apply a new licence The Terminfo Databas...",""],
["./system_limits.htm","System Limits","System Limits Maximum number of users Determined by the licence Maximum number of phantoms Determined by the licence Maximum hashed file size 1638...",""],
["./term.htm","TERM","TERM The TERM command specifies the terminal display dimensions. Format TERM TERM { columns } { , lines } {term.type} TERM COLOUR { bgc} { , fgc} ...",""],
["./terminfo.htm","The Terminfo Database","The Terminfo Database Control sequences and other characteristics of terminal devices are defined in the terminfo database. This is normally a sub...",""],
["./term_association.htm","Association term","Association Term Where the values stored in two or more multi-valued fields of the same table (file) are related such that corresponding values be...",""],
["./term_datapart.htm","Data part term","Data Part Term The data part of a table (file) holds the actual database records of the table. ",""],
["./term_dictpart.htm","Dictionary part term","Dictionary Part Term The dictionary part of a table (file) holds records that describe the layout of the records in the data part of the table and...",""],
["./term_field.htm","Field term","Field Term A field is one column of the data stored in a table (file). It holds some attribute of the data and is normally defined using the dicti...",""],
["./term_id.htm","ID or key term","Id or Key Term Every record in a table (file) must have a unique Id or key by which it can be referenced. The id may be from 1 to 63 characters in...",""],
["./term_record.htm","Record term","Record Term A record is a row from a table (file) and typically describes one instance of the data type stored in the file. For example, the recor...",""],
["./term_subvalue.htm","Subvalue term","Subvalue Term The values stored in a multi-valued field can be further subdivided into subvalues. Where this is done, the field, which is part of ...",""],
["./term_value.htm","Value term","Value Term Each field of a table (file) may hold one or more values. A field that only ever contains one value is said to be single valued. A fiel...",""],
["./time.htm","TIME","TIME The TIME command displays the current date and time. Format TIME TIME INTERNAL The command takes no arguments. The date and time is reported ...",""],
["./to.htm","TO (Selection verbs)","TO (Selection verbs) The TO keyword used in a SELECT , SSELECT or SEARCH command specifies the select list to be created. Format TO list.no where ...",""],
["./total.htm","TOTAL","TOTAL The TOTAL field qualifier keyword causes a field to be reported together with its total value. Format TOTAL field {field.qualifiers} where f...",""],
["./to_delimited.htm","TO (Delimited reports)","TO (Delimited reports) The TO keyword used in a LIST or SORT command with the CSV or DELIMITER options specifies the pathname of the output file. ...",""],
["./to_reformat.htm","TO (REFORMAT)","TO (REFORMAT) The TO keyword used in a REFORMAT command specifies the name of the output file. Format TO new.file.name where new.file.name is the ...",""],
["./transactions.htm","Transactions","Transactions A transaction is a group of related database updates to be treated as a unit that must either happen in its entirety or not at all. F...",""],
["./triggers.htm","Triggers","Triggers A trigger is an optional user written function associated with a hashed file and configured to be executed when certain file operations a...",""],
["./t_dump.htm","T.DUMP","T.DUMP The T.DUMP command saves data to a Pick style T-DUMP tape. Format T.DUMP {DICT} filename {id...} {BINARY} {COUNT.SUP} {DET.SUP} {FROM listn...",""],
["./t_load.htm","T.LOAD","T.LOAD The T.LOAD command restores a Pick style T-DUMP tape. Format T.LOAD {DICT} filename {item.list} {BINARY} {COUNT.SUP} {OVERWRITING} where fi...",""],
["./t_xxx.htm","T.DET, T.EOD, T.FWD, T.RDLBL, T.READ, T.REW, T.STAT, T.WEOF","T.DET, T.EOD, T.FWD, T.RDLBL, T.READ, T.REW, T.STAT, T.WEOF The T.xxx utility commands perform various functions to a tape device. Format T.DET De...",""],
["./unlike.htm","UNLIKE","UNLIKE, NOT.MATCHING The UNLIKE selection clause operator compares a field or evaluated expression against another field, evaluated expression or ...",""],
["./unlock.htm","UNLOCK","UNLOCK The UNLOCK command, available only in the QMSYS account, releases task, record or file locks set by any process. Format UNLOCK { USER user....",""],
["./update_account.htm","UPDATE.ACCOUNT","UPDATE.ACCOUNT The UPDATE.ACCOUNT command copies all system VOC entries from NEWVOC, setting the correct locations for system files. Format UPDATE...",""],
["./update_licence.htm","UPDATE.LICENCE","UPDATE.LICENCE The UPDATE.LICENCE command, available only in the QMSYS account, applies new licence details. Format UPDATE.LICENCE The UPDATE.LICE...",""],
["./update_record.htm","UPDATE.RECORD","UPDATE.RECORD UPDATE.RECORD simplifies amendment of database files. In batch mode , it allows the same update to be made to multiple records in a ...",""],
["./ur_batch.htm","UPDATE.RECORD batch mode","UPDATE.RECORD - Batch Mode UPDATE.RECORD runs in batch mode of the command line includes one or more field/value specifications. If the EXCLUSIVE ...",""],
["./ur_visual.htm","UPDATE.RECORD visual mode","UPDATE.RECORD - Visual Mode UPDATE.RECORD runs in visual mode if the command line contains no field/value specifications. Visual mode presents a f...",""],
["./usersecurity.htm","User Management and System Security","User Management and System Security This section applies to Windows users only. Because QM runs on all multi-tasking Windows environments, some of...",""],
["./using.htm","USING","USING The USING clause allows a query to be processed using the dictionary of another file. Format USING { DICT } file.name where DICT specifies t...",""],
["./vertically.htm","VERTICALLY","VERTICALLY, VERT The VERTICALLY display option keyword causes a vertical format report to be produced. The synonym VERT may be used. Format VERTIC...",""],
["./virtual_file_system.htm","The Virtual File System","The Virtual File System The Virtual File System (VFS) allows application designers to provide access to data that appears to an application as a f...",""],
["./voc.htm","The VOC File","The VOC File The VOC file is central to everything that QM does. This file is the vocabulary of words and symbols that may appear in commands and ...",""],
["./voc_d.htm","VOC D-type records - Data items","VOC D-Type Records - Data Items A D-type record defines a field stored in a data file. Although D-type records may be stored in the VOC file, they...",""],
["./voc_f.htm","VOC F-type records - File definitions","VOC F-Type Records - File Definitions Every file referenced by an application is accessed via an F-type VOC record. This record maps the QM name o...",""],
["./voc_k.htm","VOC K-type records - Keywords","VOC K-Type Records - Keywords Keywords affect the behaviour of commands or introduce optional components in the command syntax. Keywords are defin...",""],
["./voc_m.htm","VOC M-type records - Menu definitions","VOC M-Type Records - Menu Definitions A VOC menu record defines a menu of numbered options to be displayed to the user when the menu entry is exec...",""],
["./voc_pa.htm","VOC PA-type records - Paragraphs","VOC PA-Type Records - Paragraphs A paragraph is a sequence of stored commands or sentences which will be executed in turn by entering the paragrap...",""],
["./voc_ph.htm","VOC PH-type records - Phrases","VOC PH-Type Records - Phrases A phrase can be used in query processor sentences. When the sentence is executed, the phrase name is replaced by the...",""],
["./voc_pq.htm","VOC PQ-type records - PROCs","VOC PQ-Type Records - PROCs PROCs are the predecessor of paragraphs. They are generally thought to be much harder to understand and maintain but a...",""],
["./voc_q.htm","VOC Q-type records - Remote file pointers","VOC Q-Type Records - Remote File Pointers A Q-type VOC record points to a file defined in the VOC of another account. 1: Q { descriptive text } 2:...",""],
["./voc_r.htm","VOC R-type records - Remote pointers","VOC R-Type Records - Remote Pointers An R type VOC entry points to a record in another file which is constructed in the same way as an executable ...",""],
["./voc_s.htm","VOC S-type records - Sentences","VOC-S Type Records - Sentences Where a particular command is executed frequently, it may be useful to store it as a sentence. 1: S { descriptive t...",""],
["./voc_v.htm","VOC V-type records - Verbs","VOC V-Type Records - Verbs A V type record defines a command name and determines the QM component that will be used to process the command. 1: V {...",""],
["./voc_x.htm","VOC X-type records - Miscellaneous storage","VOC X-Type Records - Miscellaneous Storage X-type VOC items are miscellaneous data storage records which may be used in any way the application de...",""],
["./void.htm","VOID","VOID The VOID statement discards the result of an associated expression. Format VOID expr where expr is an expression. The VOID statement evaluate...",""],
["./when.htm","WHEN","WHEN The WHEN keyword introduces a selection clause for a multi-valued field. Format WHEN condition where condition is field1 operator field2 to c...",""],
["./where.htm","WHERE","WHERE The WHERE command displays the pathname of the current account. Format WHERE This command is a simple sentence that displays the value of th...",""],
["./who.htm","WHO","WHO The WHO command displays the current user number and account name. Format WHO Each directory holding a VOC file is termed an account. Multiple...",""],
["./with.htm","WITH","WITH The WITH keyword introduces a selection clause. Format WITH {EVERY} condition {rel.op {EVERY} condition...} where condition is field1 operato...",""],
["./without.htm","WITHOUT","WITHOUT The WITHOUT phrase is a synonym for use of WITH NO. Format WITHOUT condition {rel.op condition...} Example LIST ORDERS WITHOUT PAYMENT.DAT...",""]];
