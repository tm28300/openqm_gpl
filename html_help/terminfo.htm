<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- saved from url=(0029)http://www.helpandmanual.com/ -->
<head><script type="text/javascript" src="helpman_topicinit.js"></script>
<!-- Redirect browser to frame page if page is not in the content frame. -->
<script type="text/javascript">
<!--
if(top.frames.length==0) { top.location.href="index.html?terminfo.htm"; }
else { parent.quicksync('a9.2'); }
//-->
</script>
<script type="text/javascript" src="highlight.js"></script>
   <title>The Terminfo Database</title>
   <meta name="generator" content="Help &amp; Manual" />
   <meta name="keywords" content="Terminfo database,Terminal configuration" />
   <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
   <meta http-equiv="Content-Style-Type" content="text/css" />
   <link type="text/css" href="default.css" rel="stylesheet" />
</head>
<body style="margin: 0px 0px 0px 0px; background: #FFFFFF;" onload="highlight();">
<div id="hmpopupDiv" style="visibility:hidden; position:absolute; z-index:1000; "></div>


<table width="100%" border="0" cellspacing="0" cellpadding="5" bgcolor="#649CCC">
  <tr valign="middle">
    <td align="left">
      <p class="p_Heading1"><span class="f_Heading1">The Terminfo Database</span></p>

    </td>
    <td align="right">
     <span style="font-size: 9pt">
     <a href="_.htm"><img src="top.gif" border=0 alt="Top"></a>&nbsp;
     <a href="configparams.htm"><img src="previous.gif" border=0 alt="Previous"></a>&nbsp;
     <a href="qmtic.htm"><img src="next.gif" border=0 alt="Next"></a>
     </span>
    </td>
  </tr>
</table>


<!-- Placeholder for topic body. -->
<table width="100%" border="0" cellspacing="0" cellpadding="5"><tr valign="top"><td align="left">
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">Control sequences and other characteristics of terminal devices are defined in the terminfo database. This is normally a subdirectory structure under the QMSYS account but can be moved elsewhere if required by use of the <a href="configparams.htm#terminfo">TERMINFO</a> configuration parameter. The structure of the terminfo database closely mimics that found as a standard component on Linux and other operating systems though QM has some private extensions to the internal library format.</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">This feature does not apply to the PDA version of QM.</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="font-weight: bold; color: #000000;">Location and Structure</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">The terminfo directory contains a set of subdirectories named using the first character of the terminal types stored within them. Each of these directories then contains a file for each terminal type. Thus, for example, the definition for a vt100 terminal on a Windows system with the default QMSYS location would be found in c:\qmsys\terminfo\v\vt100.</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">The definition files are stored in an encoded form that closely reflects the way in which QM uses the data internally. QM provides a utility, <a href="qmtic.htm">qmtic</a>, to compile or decompile terminfo entries.</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">A master source for a variety of terminals is in the QMSYS account directory as terminfo.src and the entire set of definitions is compiled when QM is installed. To simplify maintenance of a private set of new or modified terminal definitions, the QM installation process will look for a file named terminfo.mods in the QMSYS account directory and, if it exists, will compile it after the standard source.</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">Linux users wishing to transfer entries from the standard Linux terminfo database to the QM terminfo database should use the Linux </span><span style="font-weight: bold; color: #000000;">infocmp</span><span style="color: #000000;"> tool to decompile the Linux definition and then recompile it using qmtic, removing any entries that are not supported on QM.</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="font-weight: bold; color: #000000;">Source Format</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">Terminfo entries contain three types of item; booleans, numbers and strings.</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">A boolean item is present in the terminfo entry if the feature or capability that it represents is supported by the terminal. QM currently does not make use of any of the boolean items.</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">A number entry holds the value of a numeric parameter. For example, the cols item defines the normal number of columns per line.</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">A string item holds a control string. These may be codes to be sent to the terminal to perform a specific task such as clearing the screen or moving the cursor, or may be a code sent by the terminal when a specific key is pressed by the user. Strings representing commands sent to the terminal device often include parameterised information such as screen positions or counts.</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">A terminfo source file consists of one or more terminal definitions separated by at least one blank line. Lines commencing with a hash character (#) are comments and are totally ignored during compilation. Each definition consists of a number of comma separated items. A definition can be split over multiple lines by inserting a newline after a comma.</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">The first line of each entry contains a list of terminal types defined by that entry and a text description. For example:</span></p>
<p style="margin: 10px 0px 10px 30px;"><span style="font-family: 'Courier New'; color: #000000;">vt100|vt100-am|dec vt100 (w/advanced video),</span></p>
<p><span style="color: #000000;">This line is separated into a number of fields using the vertical bar (|) character. The last field is the text description. All preceding fields are terminal device names. Thus, the entry introduced by the line shown above defines the vt100 and vt100-am terminal types. There will be separate compiled files for each of these terminals in the final terminfo database.</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">The remaining lines of the entry define the characteristics of the device. Although the order is not fixed, terminfo entries normally have the booleans first, followed by the numbers, followed by the strings.</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">A boolean entry consists only of its name. A number consists of the name, a hash character, and the value of the parameter. A string consists of the name, an equals character (=), and the value of the parameter. For example, the first few lines of the vt100 definition are:</span></p>
<p style="margin: 10px 0px 0px 30px;"><span style="font-family: 'Courier New'; color: #000000;">vt100|vt100-am|dec vt100 (w/advanced video),</span></p>
<p style="margin: 0px 0px 0px 30px;"><span style="font-family: 'Courier New'; color: #000000;"> &nbsp;&nbsp; am, xenl, msgr, xon,</span></p>
<p style="margin: 0px 0px 0px 30px;"><span style="font-family: 'Courier New'; color: #000000;"> &nbsp;&nbsp; cols#80, it#8, lines#24, vt#3,</span></p>
<p style="margin: 0px 0px 0px 30px;"><span style="font-family: 'Courier New'; color: #000000;"> &nbsp;&nbsp; bel=^G, cr=\r, csr=\E[%i%p1%d;%p2%dr, tbc=\E[3g,</span></p>
<p style="margin: 0px 0px 0px 30px;"><span style="font-family: 'Courier New'; color: #000000;"> &nbsp;&nbsp; clear=\E[H\E[J$&lt;50&gt;, el=\E[K$&lt;3&gt;, ed=\E[J$&lt;50&gt;,</span></p>
<p style="margin: 0px 0px 0px 30px;"><span style="font-family: 'Courier New'; color: #000000;"> &nbsp;&nbsp; cup=\E[%i%p1%d;%p2%dH$&lt;5&gt;, cud1=\n, home=\E[H,</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">String tokens may contain the following special character sequences:</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="60"><span style="color: #000000;">\b</span></td><td><span style="color: #000000;">Backspace (char 8)</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="60"><span style="color: #000000;">\e</span></td><td><span style="color: #000000;">Escape (char 27)</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="60"><span style="color: #000000;">\f</span></td><td><span style="color: #000000;">Formfeed (char 12)</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="60"><span style="color: #000000;">\l</span></td><td><span style="color: #000000;">Linefeed (char 10)</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="60"><span style="color: #000000;">\n</span></td><td><span style="color: #000000;">Linefeed (char 10)</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="60"><span style="color: #000000;">\r</span></td><td><span style="color: #000000;">Carriage return (char 13)</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="60"><span style="color: #000000;">\s</span></td><td><span style="color: #000000;">Space (char 32)</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="60"><span style="color: #000000;">\t</span></td><td><span style="color: #000000;">Tab (char 9)</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="60"><span style="color: #000000;">\^</span></td><td><span style="color: #000000;">Caret (^)</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="60"><span style="color: #000000;">\\</span></td><td><span style="color: #000000;">Backslash (\)</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="60"><span style="color: #000000;">\</span><span style="font-style: italic; color: #000000;">x</span></td><td><span style="color: #000000;">Ctrl-</span><span style="font-style: italic; color: #000000;">x</span><span style="color: #000000;"> (chars 0 - 31)</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="60"><span style="color: #000000;">%</span><span style="font-style: italic; color: #000000;">x</span></td><td><span style="color: #000000;">Parameter action as described below</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="60"><span style="color: #000000;">%%</span></td><td><span style="color: #000000;">Percent sign (%)</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="60"><span style="color: #000000;">$&lt;</span><span style="font-style: italic; color: #000000;">n</span><span style="color: #000000;">&gt;</span></td><td><span style="color: #000000;">Insert an </span><span style="font-style: italic; color: #000000;">n</span><span style="color: #000000;"> millisecond delay. This code is ignored by QM, removing it from the final string.</span></td></tr></table></div><p style="margin: 0px 0px 0px 30px;"><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">The %</span><span style="font-style: italic; color: #000000;">x</span><span style="color: #000000;"> parameter notation performs run time manipulation of the character string, often inserting parameter values. These operations use a stack for intermediate results and are described in terms of their C programming language equivalents:</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="90"><span style="color: #000000;">%c</span></td><td><span style="color: #000000;">pop top stack item and print it as a character (like %c in printf())</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="90"><span style="color: #000000;">%d</span></td><td><span style="color: #000000;">pop top stack item and print it as an integer (like %d in printf())</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="90"><span style="color: #000000;">%s</span></td><td><span style="color: #000000;">pop top stack item and print it as a string (like %s in printf())</span></td></tr></table></div><p style="text-indent: -90px; margin: 0px 0px 0px 120px;"><span style="color: #000000;">%[[:]flags][width[.precision]][doxXs]</span></p>
<p style="text-indent: -90px; margin: 0px 0px 0px 120px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #000000;">as in printf, flags are [-+#] and space. The ':' is used to avoid making %+ or %- patterns (see below).</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="90"><span style="color: #000000;">%p[1-9]</span></td><td><span style="color: #000000;">push ith parm</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="90"><span style="color: #000000;">%P[a-z]</span></td><td><span style="color: #000000;">set dynamic variable [a-z] from top stack item</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="90"><span style="color: #000000;">%g[a-z]</span></td><td><span style="color: #000000;">get dynamic variable [a-z] and push it onto stack</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="90"><span style="color: #000000;">%P[A-Z]</span></td><td><span style="color: #000000;">set static variable [A-Z] from top stack item</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="90"><span style="color: #000000;">%g[A-Z]</span></td><td><span style="color: #000000;">get static variable [A-Z] and push it onto stack</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="90"><span style="color: #000000;">%l</span></td><td><span style="color: #000000;">replace topmost stack item with its string length</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="90"><span style="color: #000000;">%'c'</span></td><td><span style="color: #000000;">push char constant c</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="90"><span style="color: #000000;">%{nn}</span></td><td><span style="color: #000000;">push integer constant nn</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="90"><span style="color: #000000;">%+</span></td><td><span style="color: #000000;">replace top two stack items with their sum</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="90"><span style="color: #000000;">%-</span></td><td><span style="color: #000000;">replace top two stack items with their difference</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="90"><span style="color: #000000;">%*</span></td><td><span style="color: #000000;">replace top two stack items with their product</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="90"><span style="color: #000000;">%/</span></td><td><span style="color: #000000;">replace top two stack items with their quotient</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="90"><span style="color: #000000;">%m</span></td><td><span style="color: #000000;">replace top two stack items with the remainder from division</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="90"><span style="color: #000000;">%&amp;</span></td><td><span style="color: #000000;">replace top two stack items with their logical AND</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="90"><span style="color: #000000;">%|</span></td><td><span style="color: #000000;">replace top two stack items with their logical OR</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="90"><span style="color: #000000;">%^</span></td><td><span style="color: #000000;">replace top two stack items with their logical exclusive OR</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="90"><span style="color: #000000;">%=</span></td><td><span style="color: #000000;">replace top two stack items with the result of an equality test</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="90"><span style="color: #000000;">%&gt;</span></td><td><span style="color: #000000;">replace top two stack items with the result of a greater than test</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="90"><span style="color: #000000;">%&lt;</span></td><td><span style="color: #000000;">replace top two stack items with the result of a less than test</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="90"><span style="color: #000000;">%A %O</span></td><td><span style="color: #000000;">logical and &amp; or operations for conditionals</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="90"><span style="color: #000000;">%!</span></td><td><span style="color: #000000;">replace top stack item with its logical inverse</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="90"><span style="color: #000000;">%~</span></td><td><span style="color: #000000;">replace top stack item with its bitwise inverse</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="90"><span style="color: #000000;">%i</span></td><td><span style="color: #000000;">add 1 to first two parms (for ANSI terminals)</span></td></tr></table></div><p style="text-indent: -90px; margin: 0px 0px 0px 120px;"><span style="color: #000000;">%? expr %t thenpart %e elsepart %;</span></p>
<p style="text-indent: 60px; margin: 0px 0px 0px 60px;"><span style="color: #000000;">if-then-else, %e elsepart is optional.</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">For those of the above operators which are binary and not commutative, the stack works in the usual way, with</span></p>
<p style="text-indent: 30px;"><span style="color: #000000;">%gx %gy %m</span></p>
<p><span style="color: #000000;">resulting in x mod y, not the reverse.</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">For example, the QMBasic @(</span><span style="font-style: italic; color: #000000;">col</span><span style="color: #000000;">,</span><span style="font-style: italic; color: #000000;">row</span><span style="color: #000000;">) function translates to the cup (cursor position) terminfo entry. For the vt100 definition shown above this is</span></p>
<p style="margin: 10px 0px 10px 30px;"><span style="font-family: 'Courier New'; color: #000000;">cup=\E[%i%p1%d;%p2%dH$&lt;5&gt;</span></p>
<p><span style="color: #000000;">Taking this apart, element by element for a usage as @(10,5):</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="60"><span style="color: #000000;">\E</span></td><td><span style="color: #000000;">Escape character</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="60"><span style="color: #000000;">[</span></td><td><span style="color: #000000;">[ character</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="60"><span style="color: #000000;">%i</span></td><td><span style="color: #000000;">Increment both arguments to allow for positions numbered from 1 rather than 0. The argument values 10 and 5 thus become 11 and 6.</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="60"><span style="color: #000000;">%p1</span></td><td><span style="color: #000000;">Push parameter 1 (11) onto the stack</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="60"><span style="color: #000000;">%d</span></td><td><span style="color: #000000;">Print top item from stack as an integer</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="60"><span style="color: #000000;">;</span></td><td><span style="color: #000000;">; character</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="60"><span style="color: #000000;">%p2</span></td><td><span style="color: #000000;">Push parameter 2 (6) onto the stack</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="60"><span style="color: #000000;">%d</span></td><td><span style="color: #000000;">Print top item from stack as an integer</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="60"><span style="color: #000000;">H</span></td><td><span style="color: #000000;">H character</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="60"><span style="color: #000000;">$&lt;5&gt;</span></td><td><span style="color: #000000;">Delay - Ignored by QM.</span></td></tr></table></div><p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">The end result is thus &quot;Esc[11;6H&quot;.</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="font-weight: bold; color: #000000;">Colour Mapping</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">Different terminal emulators use variations on the numeric values used to represent colours (see the QMBasic </span><span style="font-weight: bold; color: #000000;"><a href="qmb_at_fun.htm">@(-37)</a></span><span style="color: #000000;"> and </span><span style="font-weight: bold; color: #000000;"><a href="qmb_at_fun.htm">@(-38)</a></span><span style="color: #000000;"> functions). To enable users to employ a consistent set of colour values in application programs whilst working with different terminal emulators, the terminfo definition may include an optional element named colourmap (British spelling) that provides a translation between internal colour values and the actual colour number transmitted to the terminal. The format of this entry is</span></p>
<p style="margin: 6px 0px 6px 30px;"><span style="font-family: 'Courier New'; color: #000000;">colourmap=0|1|2|3|7|5|6|4|8|9|10|11|12|13|14|15</span></p>
<p><span style="color: #000000;">where the elements correspond to internal colour values zero upwards and the number in each element is the colour value to be sent to the terminal. In this example, colours 4 and 7 have been swapped.</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">Colours for which the value is not to be changed may be left blank and trailing unchanged values may be omitted. Thus, the above example could be shortened to</span></p>
<p style="margin: 6px 0px 6px 30px;"><span style="font-family: 'Courier New'; color: #000000;">colourmap=||||7|||4</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="font-weight: bold; color: #000000;">User Definable Entries</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">The terminfo database includes 10 entries (u0 to u9) for user use. QM pre-defines the function of two of these, the remaining eight are available for any purpose that the user wishes.</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 30px;"><table cellspacing="0" cellpadding="4" border="0" style="border: none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td valign="top" width="84px" style="width:84px;"><p style="margin: 10px 0px 0px 0px;"><span style="color: #000000;">u0 - u7</span></p>
</td>
<td valign="top" width="175px" style="width:175px;"><p style="margin: 10px 0px 0px 0px;"><span style="color: #000000;">@(-100) to @(-107)</span></p>
</td>
<td valign="top" width="116px" style="width:116px;"><p style="margin: 10px 0px 0px 0px;"><span style="color: #000000;">&nbsp;</span></p>
</td>
<td valign="top" width="562px" style="width:562px;"><p style="margin: 10px 0px 0px 0px;"><span style="color: #000000;">Undefined. Users may adopt these for any purpose.</span></p>
</td>
</tr>
<tr style="text-align:left;vertical-align:top;">
<td valign="top" width="84px" style="width:84px;"><p style="margin: 10px 0px 0px 0px;"><span style="color: #000000;">u8</span></p>
</td>
<td valign="top" width="175px" style="width:175px;"><p style="margin: 10px 0px 0px 0px;"><span style="color: #000000;">@(-108)</span></p>
</td>
<td valign="top" width="116px" style="width:116px;"><p style="margin: 10px 0px 0px 0px;"><span style="color: #000000;">IT$ACMD</span></p>
</td>
<td valign="top" width="562px" style="width:562px;"><p style="margin: 10px 0px 0px 0px;"><span style="color: #000000;">Asynchronous command execution prefix. This code prefixes a command to be executed on the client system followed by a newline. The QM session is not suspended while the command is executed.</span></p>
</td>
</tr>
<tr style="text-align:left;vertical-align:top;">
<td valign="top" width="84px" style="width:84px;"><p><span style="color: #000000;">u9</span></p>
</td>
<td valign="top" width="175px" style="width:175px;"><p><span style="color: #000000;">@(-109)</span></p>
</td>
<td valign="top" width="116px" style="width:116px;"><p><span style="color: #000000;">IT$SCMD</span></p>
</td>
<td valign="top" width="562px" style="width:562px;"><p><span style="color: #000000;">Synchronous command execution prefix. This code prefixes a command to be executed on the client system followed by a newline. The QM session is suspended while the command is executed.</span></p>
</td>
</tr>
</table>
</div>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">The u8 code is used internally by some parts of QM. The remaining codes will only be used as defined in user written application software.</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="font-weight: bold; color: #000000;">AccuTerm Extensions</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">The AccuTerm terminal emulator includes support for additional special functions that are not part of the standard terminal definitions for industry standard terminal types. These extra functions include</span></p>
<p style="margin: 10px 0px 0px 30px;"><span style="color: #000000;">Client side command execution (synchronous and asynchronous)</span></p>
<p style="margin: 10px 0px 0px 30px;"><span style="color: #000000;">Screen region save and restore (used by the QMBasic debugger)</span></p>
<p style="margin: 10px 0px 0px 30px;"><span style="color: #000000;">Mouse click detection</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">QM ships with extended definitions for some devices using terminal type names with a -at suffix (e.g. vt100-at). Users can easily add similar extensions to other terminal definitions.</span></p>

</td></tr></table>

</body>
</html>
